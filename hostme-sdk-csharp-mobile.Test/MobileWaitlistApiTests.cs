using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;


namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing MobileWaitlistApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MobileWaitlistApiTests
    {
        private MobileWaitlistApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new MobileWaitlistApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MobileWaitlistApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<MobileWaitlistApi> (instance, "instance is a MobileWaitlistApi");
        }

        
        /// <summary>
        /// Test CheckInWithWaiting
        /// </summary>
        [Test]
        public void CheckInWithWaitingTest()
        {
            // TODO: add unit test for the method 'CheckInWithWaiting'
            int? waitingItemId = null; // TODO: replace null with proper value
            
            var response = instance.CheckInWithWaiting(waitingItemId);
            Assert.IsInstanceOf<Transaction> (response, "response is Transaction"); 
        }
        
        /// <summary>
        /// Test Close
        /// </summary>
        [Test]
        public void CloseTest()
        {
            // TODO: add unit test for the method 'Close'
            int? waitingItemId = null; // TODO: replace null with proper value
            
            instance.Close(waitingItemId);
             
        }
        
        /// <summary>
        /// Test ConfirmWithApp
        /// </summary>
        [Test]
        public void ConfirmWithAppTest()
        {
            // TODO: add unit test for the method 'ConfirmWithApp'
            int? confirmationCode = null; // TODO: replace null with proper value
            PhoneConfirmationBindingModel conf = null; // TODO: replace null with proper value
            
            var response = instance.ConfirmWithApp(confirmationCode, conf);
            Assert.IsInstanceOf<WaitingItem> (response, "response is WaitingItem"); 
        }
        
        /// <summary>
        /// Test GetInLine
        /// </summary>
        [Test]
        public void GetInLineTest()
        {
            // TODO: add unit test for the method 'GetInLine'
            NewRemoteWaitingBindingModel value = null; // TODO: replace null with proper value
            
            var response = instance.GetInLine(value);
            Assert.IsInstanceOf<WaitingItem> (response, "response is WaitingItem"); 
        }
        
        /// <summary>
        /// Test GetUserCurrentWaiting
        /// </summary>
        [Test]
        public void GetUserCurrentWaitingTest()
        {
            // TODO: add unit test for the method 'GetUserCurrentWaiting'
            
            var response = instance.GetUserCurrentWaiting();
            Assert.IsInstanceOf<WaitingItem> (response, "response is WaitingItem"); 
        }
        
        /// <summary>
        /// Test LeaveTheLine
        /// </summary>
        [Test]
        public void LeaveTheLineTest()
        {
            // TODO: add unit test for the method 'LeaveTheLine'
            int? waitingItemId = null; // TODO: replace null with proper value
            string comment = null; // TODO: replace null with proper value
            
            instance.LeaveTheLine(waitingItemId, comment);
             
        }
        
        /// <summary>
        /// Test MarkAllMessagesAsRead
        /// </summary>
        [Test]
        public void MarkAllMessagesAsReadTest()
        {
            // TODO: add unit test for the method 'MarkAllMessagesAsRead'
            int? waitingItemId = null; // TODO: replace null with proper value
            
            instance.MarkAllMessagesAsRead(waitingItemId);
             
        }
        
        /// <summary>
        /// Test PutOnHold
        /// </summary>
        [Test]
        public void PutOnHoldTest()
        {
            // TODO: add unit test for the method 'PutOnHold'
            int? restaurantId = null; // TODO: replace null with proper value
            int? waitingItemId = null; // TODO: replace null with proper value
            
            instance.PutOnHold(restaurantId, waitingItemId);
             
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO: add unit test for the method 'SendMessage'
            int? waitingItemId = null; // TODO: replace null with proper value
            string body = null; // TODO: replace null with proper value
            
            var response = instance.SendMessage(waitingItemId, body);
            Assert.IsInstanceOf<Message> (response, "response is Message"); 
        }
        
        /// <summary>
        /// Test TakeOffHold
        /// </summary>
        [Test]
        public void TakeOffHoldTest()
        {
            // TODO: add unit test for the method 'TakeOffHold'
            int? restaurantId = null; // TODO: replace null with proper value
            int? waitingItemId = null; // TODO: replace null with proper value
            
            instance.TakeOffHold(restaurantId, waitingItemId);
             
        }
        
    }

}
