using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing MobileReservationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MobileReservationsApiTests
    {
        private MobileReservationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new MobileReservationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MobileReservationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<MobileReservationsApi> (instance, "instance is a MobileReservationsApi");
        }

        
        /// <summary>
        /// Test AddNewReservation
        /// </summary>
        [Test]
        public void AddNewReservationTest()
        {
            // TODO: add unit test for the method 'AddNewReservation'
            CreateCustomerReservation value = null; // TODO: replace null with proper value
            var response = instance.AddNewReservation(value);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test CloseAsCanceled
        /// </summary>
        [Test]
        public void CloseAsCanceledTest()
        {
            // TODO: add unit test for the method 'CloseAsCanceled'
            string reservationId = null; // TODO: replace null with proper value
CancelReservation cancelReservationContract = null; // TODO: replace null with proper value
            instance.CloseAsCanceled(reservationId, cancelReservationContract);
             
        }
        
        /// <summary>
        /// Test GetReservationById
        /// </summary>
        [Test]
        public void GetReservationByIdTest()
        {
            // TODO: add unit test for the method 'GetReservationById'
            string reservationId = null; // TODO: replace null with proper value
            var response = instance.GetReservationById(reservationId);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test GetUserReservations
        /// </summary>
        [Test]
        public void GetUserReservationsTest()
        {
            // TODO: add unit test for the method 'GetUserReservations'
            string queryOptions = null; // TODO: replace null with proper value
            var response = instance.GetUserReservations(queryOptions);
            Assert.IsInstanceOf<List<Reservation>> (response, "response is List<Reservation>"); 
        }
        
        /// <summary>
        /// Test ReadAllMessage
        /// </summary>
        [Test]
        public void ReadAllMessageTest()
        {
            // TODO: add unit test for the method 'ReadAllMessage'
            string reservationId = null; // TODO: replace null with proper value
            instance.ReadAllMessage(reservationId);
             
        }
        
        /// <summary>
        /// Test SendMessageToReservation
        /// </summary>
        [Test]
        public void SendMessageToReservationTest()
        {
            // TODO: add unit test for the method 'SendMessageToReservation'
            string reservationId = null; // TODO: replace null with proper value
CreateMessage createMessageContract = null; // TODO: replace null with proper value
            instance.SendMessageToReservation(reservationId, createMessageContract);
             
        }
        
        /// <summary>
        /// Test UpdateReservation
        /// </summary>
        [Test]
        public void UpdateReservationTest()
        {
            // TODO: add unit test for the method 'UpdateReservation'
            string reservationId = null; // TODO: replace null with proper value
UpdateReservation value = null; // TODO: replace null with proper value
            instance.UpdateReservation(reservationId, value);
             
        }
        
    }

}
