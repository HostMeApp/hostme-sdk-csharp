/* 
 * Qa mobile api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: mb
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing MobileCoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MobileCoreApiTests
    {
        private MobileCoreApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MobileCoreApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MobileCoreApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MobileCoreApi
            //Assert.IsInstanceOfType(typeof(MobileCoreApi), instance, "instance is a MobileCoreApi");
        }

        
        /// <summary>
        /// Test ChangePassword
        /// </summary>
        [Test]
        public void ChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChangePassword model = null;
            //instance.ChangePassword(model);
            
        }
        
        /// <summary>
        /// Test CheckIn
        /// </summary>
        [Test]
        public void CheckInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionCheckin checkinContract = null;
            //var response = instance.CheckIn(checkinContract);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }
        
        /// <summary>
        /// Test FindRestaurants
        /// </summary>
        [Test]
        public void FindRestaurantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? lat = null;
            //double? lon = null;
            //string name = null;
            //string city = null;
            //var response = instance.FindRestaurants(lat, lon, name, city);
            //Assert.IsInstanceOf<List<RestaurantInfo>> (response, "response is List<RestaurantInfo>");
        }
        
        /// <summary>
        /// Test GetAllRestaurants
        /// </summary>
        [Test]
        public void GetAllRestaurantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllRestaurants();
            //Assert.IsInstanceOf<List<RestaurantInfo>> (response, "response is List<RestaurantInfo>");
        }
        
        /// <summary>
        /// Test GetListOfLocations
        /// </summary>
        [Test]
        public void GetListOfLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetListOfLocations();
            //Assert.IsInstanceOf<List<Location>> (response, "response is List<Location>");
        }
        
        /// <summary>
        /// Test GetManageInfo
        /// </summary>
        [Test]
        public void GetManageInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnUrl = null;
            //bool? generateState = null;
            //var response = instance.GetManageInfo(returnUrl, generateState);
            //Assert.IsInstanceOf<ManageInfo> (response, "response is ManageInfo");
        }
        
        /// <summary>
        /// Test GetRegistrationToken
        /// </summary>
        [Test]
        public void GetRegistrationTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.GetRegistrationToken(token);
            //Assert.IsInstanceOf<CampaignInfo> (response, "response is CampaignInfo");
        }
        
        /// <summary>
        /// Test GetReservationAvailability
        /// </summary>
        [Test]
        public void GetReservationAvailabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //DateTimeOffset? date = null;
            //int? partySize = null;
            //int? rangeInMinutes = null;
            //string areas = null;
            //var response = instance.GetReservationAvailability(restaurantId, date, partySize, rangeInMinutes, areas);
            //Assert.IsInstanceOf<List<OnlineAvailability>> (response, "response is List<OnlineAvailability>");
        }
        
        /// <summary>
        /// Test GetRestaurantById
        /// </summary>
        [Test]
        public void GetRestaurantByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetRestaurantById(id);
            //Assert.IsInstanceOf<RestaurantInfo> (response, "response is RestaurantInfo");
        }
        
        /// <summary>
        /// Test GetUserInfo
        /// </summary>
        [Test]
        public void GetUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserInfo();
            //Assert.IsInstanceOf<UserExternal> (response, "response is UserExternal");
        }
        
        /// <summary>
        /// Test GetUserProfile
        /// </summary>
        [Test]
        public void GetUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserProfile();
            //Assert.IsInstanceOf<UserProfile> (response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test PostProfileImage
        /// </summary>
        [Test]
        public void PostProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserImage imageContract = null;
            //instance.PostProfileImage(imageContract);
            
        }
        
        /// <summary>
        /// Test ProfileImage
        /// </summary>
        [Test]
        public void ProfileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProfileImage();
            //Assert.IsInstanceOf<UserImage> (response, "response is UserImage");
        }
        
        /// <summary>
        /// Test Register
        /// </summary>
        [Test]
        public void RegisterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterUser model = null;
            //instance.Register(model);
            
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Test]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ResetPassword model = null;
            //instance.ResetPassword(model);
            
        }
        
        /// <summary>
        /// Test SetPassword
        /// </summary>
        [Test]
        public void SetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetPassword model = null;
            //instance.SetPassword(model);
            
        }
        
        /// <summary>
        /// Test UpdateUserProfile
        /// </summary>
        [Test]
        public void UpdateUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile profile = null;
            //instance.UpdateUserProfile(profile);
            
        }
        
    }

}
