/* 
 * Qa admin api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing AdminReservationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminReservationsApiTests
    {
        private AdminReservationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminReservationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminReservationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AdminReservationsApi
            //Assert.IsInstanceOfType(typeof(AdminReservationsApi), instance, "instance is a AdminReservationsApi");
        }

        
        /// <summary>
        /// Test Approve
        /// </summary>
        [Test]
        public void ApproveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //ApproveReservation contract = null;
            //var response = instance.Approve(restaurantId, reservationId, contract);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test Cancel
        /// </summary>
        [Test]
        public void CancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //CancelReservation cancelReservationContract = null;
            //var response = instance.Cancel(restaurantId, reservationId, cancelReservationContract);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //CreateReservation contract = null;
            //var response = instance.Create(restaurantId, contract);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test Export
        /// </summary>
        [Test]
        public void ExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.Export(restaurantId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //var response = instance.Get(restaurantId, reservationId);
            //Assert.IsInstanceOf<ReservationHost> (response, "response is ReservationHost");
        }
        
        /// <summary>
        /// Test GetForPeriod
        /// </summary>
        [Test]
        public void GetForPeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //DateTimeOffset? from = null;
            //var response = instance.GetForPeriod(restaurantId, from);
            //Assert.IsInstanceOf<List<ReservationHostList>> (response, "response is List<ReservationHostList>");
        }
        
        /// <summary>
        /// Test GetMessages
        /// </summary>
        [Test]
        public void GetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //var response = instance.GetMessages(restaurantId, reservationId);
            //Assert.IsInstanceOf<List<Message>> (response, "response is List<Message>");
        }
        
        /// <summary>
        /// Test GetReservationAvailability
        /// </summary>
        [Test]
        public void GetReservationAvailabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //DateTimeOffset? date = null;
            //int? groupSize = null;
            //int? rangeInMinutes = null;
            //var response = instance.GetReservationAvailability(restaurantId, date, groupSize, rangeInMinutes);
            //Assert.IsInstanceOf<AvailabilityResponse> (response, "response is AvailabilityResponse");
        }
        
        /// <summary>
        /// Test GetReservationSettings
        /// </summary>
        [Test]
        public void GetReservationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetReservationSettings(restaurantId);
            //Assert.IsInstanceOf<ReservationSettings> (response, "response is ReservationSettings");
        }
        
        /// <summary>
        /// Test GetStatistic
        /// </summary>
        [Test]
        public void GetStatisticTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetStatistic(restaurantId);
            //Assert.IsInstanceOf<ReservationsStatistic> (response, "response is ReservationsStatistic");
        }
        
        /// <summary>
        /// Test GetUnreadMessagesCount
        /// </summary>
        [Test]
        public void GetUnreadMessagesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetUnreadMessagesCount(restaurantId);
            //Assert.IsInstanceOf<Count> (response, "response is Count");
        }
        
        /// <summary>
        /// Test NoShow
        /// </summary>
        [Test]
        public void NoShowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //var response = instance.NoShow(restaurantId, reservationId);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test ReadAllMessage
        /// </summary>
        [Test]
        public void ReadAllMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //instance.ReadAllMessage(restaurantId, reservationId);
            
        }
        
        /// <summary>
        /// Test RejectReservation
        /// </summary>
        [Test]
        public void RejectReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //RejectReservation contract = null;
            //var response = instance.RejectReservation(restaurantId, reservationId, contract);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test Reopen
        /// </summary>
        [Test]
        public void ReopenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //var response = instance.Reopen(restaurantId, reservationId);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test Seat
        /// </summary>
        [Test]
        public void SeatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //string tableNumber = null;
            //var response = instance.Seat(restaurantId, reservationId, tableNumber);
            //Assert.IsInstanceOf<Reservation> (response, "response is Reservation");
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //CreateMessage createMessageContract = null;
            //var response = instance.SendMessage(restaurantId, reservationId, createMessageContract);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SetReservationSettings
        /// </summary>
        [Test]
        public void SetReservationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //ReservationSettings settings = null;
            //instance.SetReservationSettings(restaurantId, settings);
            
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reservationId = null;
            //CreateReservation contract = null;
            //instance.Update(restaurantId, reservationId, contract);
            
        }
        
    }

}
