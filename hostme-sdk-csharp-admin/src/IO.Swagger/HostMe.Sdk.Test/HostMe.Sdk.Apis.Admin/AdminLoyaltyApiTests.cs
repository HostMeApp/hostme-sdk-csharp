/* 
 * Qa admin api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing AdminLoyaltyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminLoyaltyApiTests
    {
        private AdminLoyaltyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminLoyaltyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminLoyaltyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AdminLoyaltyApi
            //Assert.IsInstanceOfType(typeof(AdminLoyaltyApi), instance, "instance is a AdminLoyaltyApi");
        }

        
        /// <summary>
        /// Test AddMember
        /// </summary>
        [Test]
        public void AddMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //MembershipCreate contract = null;
            //var response = instance.AddMember(restaurantId, contract);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test AddNewReward
        /// </summary>
        [Test]
        public void AddNewRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //Reward reward = null;
            //var response = instance.AddNewReward(restaurantId, reward);
            //Assert.IsInstanceOf<Reward> (response, "response is Reward");
        }
        
        /// <summary>
        /// Test ApproveRedeemRequest
        /// </summary>
        [Test]
        public void ApproveRedeemRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string redeemId = null;
            //var response = instance.ApproveRedeemRequest(restaurantId, redeemId);
            //Assert.IsInstanceOf<RedeemRequest> (response, "response is RedeemRequest");
        }
        
        /// <summary>
        /// Test CloseMembership
        /// </summary>
        [Test]
        public void CloseMembershipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //var response = instance.CloseMembership(restaurantId, memberId);
            //Assert.IsInstanceOf<Member> (response, "response is Member");
        }
        
        /// <summary>
        /// Test DeleteMembership
        /// </summary>
        [Test]
        public void DeleteMembershipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //var response = instance.DeleteMembership(restaurantId, memberId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteReward
        /// </summary>
        [Test]
        public void DeleteRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string rewardId = null;
            //instance.DeleteReward(restaurantId, rewardId);
            
        }
        
        /// <summary>
        /// Test ExportMembers
        /// </summary>
        [Test]
        public void ExportMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.ExportMembers(restaurantId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test Filter
        /// </summary>
        [Test]
        public void FilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? take = null;
            //string token = null;
            //var response = instance.Filter(restaurantId, take, token);
            //Assert.IsInstanceOf<List<CustomerProfile>> (response, "response is List<CustomerProfile>");
        }
        
        /// <summary>
        /// Test FindMemberByPhoneNumber
        /// </summary>
        [Test]
        public void FindMemberByPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string phoneNumber = null;
            //var response = instance.FindMemberByPhoneNumber(restaurantId, phoneNumber);
            //Assert.IsInstanceOf<Member> (response, "response is Member");
        }
        
        /// <summary>
        /// Test GetAlRewards
        /// </summary>
        [Test]
        public void GetAlRewardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetAlRewards(restaurantId);
            //Assert.IsInstanceOf<List<Reward>> (response, "response is List<Reward>");
        }
        
        /// <summary>
        /// Test GetAllMembers
        /// </summary>
        [Test]
        public void GetAllMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetAllMembers(restaurantId);
            //Assert.IsInstanceOf<ODataPagedResult1MemberContract> (response, "response is ODataPagedResult1MemberContract");
        }
        
        /// <summary>
        /// Test GetAllRedeemRequests
        /// </summary>
        [Test]
        public void GetAllRedeemRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetAllRedeemRequests(restaurantId);
            //Assert.IsInstanceOf<List<RedeemRequest>> (response, "response is List<RedeemRequest>");
        }
        
        /// <summary>
        /// Test GetDefaultLoyaltySettings
        /// </summary>
        [Test]
        public void GetDefaultLoyaltySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetDefaultLoyaltySettings(restaurantId);
            //Assert.IsInstanceOf<LoyaltySettings> (response, "response is LoyaltySettings");
        }
        
        /// <summary>
        /// Test GetLoyaltySettings
        /// </summary>
        [Test]
        public void GetLoyaltySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetLoyaltySettings(restaurantId);
            //Assert.IsInstanceOf<LoyaltySettings> (response, "response is LoyaltySettings");
        }
        
        /// <summary>
        /// Test GetMemberTransactions
        /// </summary>
        [Test]
        public void GetMemberTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //var response = instance.GetMemberTransactions(restaurantId, memberId);
            //Assert.IsInstanceOf<ODataPagedResult1TransactionContract> (response, "response is ODataPagedResult1TransactionContract");
        }
        
        /// <summary>
        /// Test GetMemberVisits
        /// </summary>
        [Test]
        public void GetMemberVisitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //var response = instance.GetMemberVisits(restaurantId, memberId);
            //Assert.IsInstanceOf<ODataPagedResult1MembershipVisitItemContract> (response, "response is ODataPagedResult1MembershipVisitItemContract");
        }
        
        /// <summary>
        /// Test GetMembershipInfo
        /// </summary>
        [Test]
        public void GetMembershipInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //var response = instance.GetMembershipInfo(restaurantId, memberId);
            //Assert.IsInstanceOf<Member> (response, "response is Member");
        }
        
        /// <summary>
        /// Test GetRewardById
        /// </summary>
        [Test]
        public void GetRewardByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string rewardId = null;
            //var response = instance.GetRewardById(restaurantId, rewardId);
            //Assert.IsInstanceOf<Reward> (response, "response is Reward");
        }
        
        /// <summary>
        /// Test IncomingCall
        /// </summary>
        [Test]
        public void IncomingCallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //IncomingCall callContract = null;
            //var response = instance.IncomingCall(restaurantId, callContract);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test PublishReward
        /// </summary>
        [Test]
        public void PublishRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string rewardId = null;
            //var response = instance.PublishReward(restaurantId, rewardId);
            //Assert.IsInstanceOf<Reward> (response, "response is Reward");
        }
        
        /// <summary>
        /// Test RejectRedeemRequest
        /// </summary>
        [Test]
        public void RejectRedeemRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string redeemId = null;
            //RedeemRequestReject reject = null;
            //var response = instance.RejectRedeemRequest(restaurantId, redeemId, reject);
            //Assert.IsInstanceOf<RedeemRequest> (response, "response is RedeemRequest");
        }
        
        /// <summary>
        /// Test SetLoyaltySettings
        /// </summary>
        [Test]
        public void SetLoyaltySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //LoyaltySettings settings = null;
            //instance.SetLoyaltySettings(restaurantId, settings);
            
        }
        
        /// <summary>
        /// Test UnpublishReward
        /// </summary>
        [Test]
        public void UnpublishRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string rewardId = null;
            //var response = instance.UnpublishReward(restaurantId, rewardId);
            //Assert.IsInstanceOf<Reward> (response, "response is Reward");
        }
        
        /// <summary>
        /// Test UpdateMember
        /// </summary>
        [Test]
        public void UpdateMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? memberId = null;
            //MembershipUpdate contract = null;
            //var response = instance.UpdateMember(restaurantId, memberId, contract);
            //Assert.IsInstanceOf<Member> (response, "response is Member");
        }
        
        /// <summary>
        /// Test UpdateReward
        /// </summary>
        [Test]
        public void UpdateRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string rewardId = null;
            //Reward reward = null;
            //var response = instance.UpdateReward(restaurantId, rewardId, reward);
            //Assert.IsInstanceOf<Reward> (response, "response is Reward");
        }
        
    }

}
