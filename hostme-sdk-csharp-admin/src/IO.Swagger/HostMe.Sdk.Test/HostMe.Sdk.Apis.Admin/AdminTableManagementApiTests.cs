/* 
 * Qa admin api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing AdminTableManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminTableManagementApiTests
    {
        private AdminTableManagementApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminTableManagementApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminTableManagementApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AdminTableManagementApi
            //Assert.IsInstanceOfType(typeof(AdminTableManagementApi), instance, "instance is a AdminTableManagementApi");
        }

        
        /// <summary>
        /// Test CreateNewFloor
        /// </summary>
        [Test]
        public void CreateNewFloorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //Floor floor = null;
            //var response = instance.CreateNewFloor(restaurantId, floor);
            //Assert.IsInstanceOf<Floor> (response, "response is Floor");
        }
        
        /// <summary>
        /// Test DeleteFloor
        /// </summary>
        [Test]
        public void DeleteFloorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string floorId = null;
            //instance.DeleteFloor(restaurantId, floorId);
            
        }
        
        /// <summary>
        /// Test GetAvailableTables
        /// </summary>
        [Test]
        public void GetAvailableTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //DateTimeOffset? date = null;
            //int? partySize = null;
            //var response = instance.GetAvailableTables(restaurantId, date, partySize);
            //Assert.IsInstanceOf<List<TableInfo>> (response, "response is List<TableInfo>");
        }
        
        /// <summary>
        /// Test GetFloorDetails
        /// </summary>
        [Test]
        public void GetFloorDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string floorId = null;
            //var response = instance.GetFloorDetails(restaurantId, floorId);
            //Assert.IsInstanceOf<Floor> (response, "response is Floor");
        }
        
        /// <summary>
        /// Test GetRestaurantFloors
        /// </summary>
        [Test]
        public void GetRestaurantFloorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetRestaurantFloors(restaurantId);
            //Assert.IsInstanceOf<List<FloorInfo>> (response, "response is List<FloorInfo>");
        }
        
        /// <summary>
        /// Test GetTableMonitors
        /// </summary>
        [Test]
        public void GetTableMonitorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //DateTimeOffset? time = null;
            //int? tableTurnOver = null;
            //var response = instance.GetTableMonitors(restaurantId, time, tableTurnOver);
            //Assert.IsInstanceOf<RestaurantState> (response, "response is RestaurantState");
        }
        
        /// <summary>
        /// Test GetTableUsersList
        /// </summary>
        [Test]
        public void GetTableUsersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetTableUsersList(restaurantId);
            //Assert.IsInstanceOf<List<TableUser>> (response, "response is List<TableUser>");
        }
        
        /// <summary>
        /// Test GetTables
        /// </summary>
        [Test]
        public void GetTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetTables(restaurantId);
            //Assert.IsInstanceOf<List<Table>> (response, "response is List<Table>");
        }
        
        /// <summary>
        /// Test GetTablesSettings
        /// </summary>
        [Test]
        public void GetTablesSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetTablesSettings(restaurantId);
            //Assert.IsInstanceOf<TablesSettings> (response, "response is TablesSettings");
        }
        
        /// <summary>
        /// Test ReleaseTable
        /// </summary>
        [Test]
        public void ReleaseTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string tableNumber = null;
            //var response = instance.ReleaseTable(restaurantId, tableNumber);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SeatPartyAtTable
        /// </summary>
        [Test]
        public void SeatPartyAtTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string tableNumber = null;
            //RegisterAtTable registerAtTableContract = null;
            //var response = instance.SeatPartyAtTable(restaurantId, tableNumber, registerAtTableContract);
            //Assert.IsInstanceOf<TableMonitor> (response, "response is TableMonitor");
        }
        
        /// <summary>
        /// Test SetTableState
        /// </summary>
        [Test]
        public void SetTableStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string tableNumber = null;
            //ChangeTableState stateContract = null;
            //instance.SetTableState(restaurantId, tableNumber, stateContract);
            
        }
        
        /// <summary>
        /// Test SetTablesSettings
        /// </summary>
        [Test]
        public void SetTablesSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //TablesSettings settings = null;
            //instance.SetTablesSettings(restaurantId, settings);
            
        }
        
        /// <summary>
        /// Test UpdateFloor
        /// </summary>
        [Test]
        public void UpdateFloorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string floorId = null;
            //Floor floor = null;
            //var response = instance.UpdateFloor(restaurantId, floorId, floor);
            //Assert.IsInstanceOf<Floor> (response, "response is Floor");
        }
        
        /// <summary>
        /// Test UpdateSeatedParty
        /// </summary>
        [Test]
        public void UpdateSeatedPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? registrationId = null;
            //RegisterAtTable registerAtTableContract = null;
            //var response = instance.UpdateSeatedParty(restaurantId, registrationId, registerAtTableContract);
            //Assert.IsInstanceOf<TableMonitor> (response, "response is TableMonitor");
        }
        
    }

}
