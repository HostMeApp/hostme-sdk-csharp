/* 
 * Qa admin api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: admin
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;

namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing AdminCoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminCoreApiTests
    {
        private AdminCoreApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminCoreApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminCoreApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AdminCoreApi
            //Assert.IsInstanceOfType(typeof(AdminCoreApi), instance, "instance is a AdminCoreApi");
        }

        
        /// <summary>
        /// Test AddNewRestaurant
        /// </summary>
        [Test]
        public void AddNewRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateRestaurant value = null;
            //var response = instance.AddNewRestaurant(value);
            //Assert.IsInstanceOf<WithAccessTokenContract1RestaurantContract> (response, "response is WithAccessTokenContract1RestaurantContract");
        }
        
        /// <summary>
        /// Test AddRestaurantZone
        /// </summary>
        [Test]
        public void AddRestaurantZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //ZoneCreate contract = null;
            //instance.AddRestaurantZone(restaurantId, contract);
            
        }
        
        /// <summary>
        /// Test AddWaiter
        /// </summary>
        [Test]
        public void AddWaiterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //WaiterCreate contract = null;
            //instance.AddWaiter(restaurantId, contract);
            
        }
        
        /// <summary>
        /// Test AddWaiterToZone
        /// </summary>
        [Test]
        public void AddWaiterToZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? zoneId = null;
            //WaiterAssign contract = null;
            //instance.AddWaiterToZone(restaurantId, zoneId, contract);
            
        }
        
        /// <summary>
        /// Test AssignWaiterToTable
        /// </summary>
        [Test]
        public void AssignWaiterToTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string tableNumber = null;
            //WaiterAssign contract = null;
            //instance.AssignWaiterToTable(restaurantId, tableNumber, contract);
            
        }
        
        /// <summary>
        /// Test ChangePassword
        /// </summary>
        [Test]
        public void ChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChangePassword model = null;
            //instance.ChangePassword(model);
            
        }
        
        /// <summary>
        /// Test CheckInvitationCode
        /// </summary>
        [Test]
        public void CheckInvitationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string invitationCode = null;
            //string restaurantId = null;
            //var response = instance.CheckInvitationCode(invitationCode, restaurantId);
            //Assert.IsInstanceOf<InvitationInfo> (response, "response is InvitationInfo");
        }
        
        /// <summary>
        /// Test CreateInvitationCode
        /// </summary>
        [Test]
        public void CreateInvitationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //Invitation invitation = null;
            //var response = instance.CreateInvitationCode(restaurantId, invitation);
            //Assert.IsInstanceOf<Token> (response, "response is Token");
        }
        
        /// <summary>
        /// Test DeleteInvitation
        /// </summary>
        [Test]
        public void DeleteInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string invitationCode = null;
            //instance.DeleteInvitation(restaurantId, invitationCode);
            
        }
        
        /// <summary>
        /// Test DeleteRestaurant
        /// </summary>
        [Test]
        public void DeleteRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //instance.DeleteRestaurant(restaurantId);
            
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string userId = null;
            //string role = null;
            //instance.DeleteUser(restaurantId, userId, role);
            
        }
        
        /// <summary>
        /// Test DeleteWaiter
        /// </summary>
        [Test]
        public void DeleteWaiterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? waiterId = null;
            //instance.DeleteWaiter(restaurantId, waiterId);
            
        }
        
        /// <summary>
        /// Test DeleteZone
        /// </summary>
        [Test]
        public void DeleteZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? zoneId = null;
            //instance.DeleteZone(restaurantId, zoneId);
            
        }
        
        /// <summary>
        /// Test EmbedReport
        /// </summary>
        [Test]
        public void EmbedReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string reportName = null;
            //var response = instance.EmbedReport(restaurantId, reportName);
            //Assert.IsInstanceOf<EmbedConfig> (response, "response is EmbedConfig");
        }
        
        /// <summary>
        /// Test GetAllUserRestaurants
        /// </summary>
        [Test]
        public void GetAllUserRestaurantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllUserRestaurants();
            //Assert.IsInstanceOf<List<Restaurant>> (response, "response is List<Restaurant>");
        }
        
        /// <summary>
        /// Test GetInvitations
        /// </summary>
        [Test]
        public void GetInvitationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetInvitations(restaurantId);
            //Assert.IsInstanceOf<List<InvitationInfo>> (response, "response is List<InvitationInfo>");
        }
        
        /// <summary>
        /// Test GetRegistrationToken
        /// </summary>
        [Test]
        public void GetRegistrationTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string tableNumber = null;
            //var response = instance.GetRegistrationToken(restaurantId, tableNumber);
            //Assert.IsInstanceOf<Token> (response, "response is Token");
        }
        
        /// <summary>
        /// Test GetRestaurantById
        /// </summary>
        [Test]
        public void GetRestaurantByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetRestaurantById(restaurantId);
            //Assert.IsInstanceOf<Restaurant> (response, "response is Restaurant");
        }
        
        /// <summary>
        /// Test GetRestaurantConfiguration
        /// </summary>
        [Test]
        public void GetRestaurantConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetRestaurantConfiguration(restaurantId);
            //Assert.IsInstanceOf<RestaurantConfiguration> (response, "response is RestaurantConfiguration");
        }
        
        /// <summary>
        /// Test GetRestaurantSettings
        /// </summary>
        [Test]
        public void GetRestaurantSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetRestaurantSettings(restaurantId);
            //Assert.IsInstanceOf<RestaurantSettings> (response, "response is RestaurantSettings");
        }
        
        /// <summary>
        /// Test GetRestaurantZones
        /// </summary>
        [Test]
        public void GetRestaurantZonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetRestaurantZones(restaurantId);
            //Assert.IsInstanceOf<List<Zone>> (response, "response is List<Zone>");
        }
        
        /// <summary>
        /// Test GetRestaurantsByEmail
        /// </summary>
        [Test]
        public void GetRestaurantsByEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.GetRestaurantsByEmail(email);
            //Assert.IsInstanceOf<List<Restaurant>> (response, "response is List<Restaurant>");
        }
        
        /// <summary>
        /// Test GetUserProfile
        /// </summary>
        [Test]
        public void GetUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserProfile();
            //Assert.IsInstanceOf<UserProfile> (response, "response is UserProfile");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetUsers(restaurantId);
            //Assert.IsInstanceOf<List<RestaurantUserInfo>> (response, "response is List<RestaurantUserInfo>");
        }
        
        /// <summary>
        /// Test GetWaiterZones
        /// </summary>
        [Test]
        public void GetWaiterZonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? waiterId = null;
            //var response = instance.GetWaiterZones(restaurantId, waiterId);
            //Assert.IsInstanceOf<List<Zone>> (response, "response is List<Zone>");
        }
        
        /// <summary>
        /// Test GetWaiters
        /// </summary>
        [Test]
        public void GetWaitersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //var response = instance.GetWaiters(restaurantId);
            //Assert.IsInstanceOf<List<Waiter>> (response, "response is List<Waiter>");
        }
        
        /// <summary>
        /// Test Me
        /// </summary>
        [Test]
        public void MeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Me();
            //Assert.IsInstanceOf<UserInfo> (response, "response is UserInfo");
        }
        
        /// <summary>
        /// Test Register
        /// </summary>
        [Test]
        public void RegisterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterUser model = null;
            //instance.Register(model);
            
        }
        
        /// <summary>
        /// Test Reinvite
        /// </summary>
        [Test]
        public void ReinviteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //string invitationCode = null;
            //instance.Reinvite(restaurantId, invitationCode);
            
        }
        
        /// <summary>
        /// Test RemoveWaiterFromZone
        /// </summary>
        [Test]
        public void RemoveWaiterFromZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? zoneId = null;
            //instance.RemoveWaiterFromZone(restaurantId, zoneId);
            
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Test]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ResetPassword model = null;
            //instance.ResetPassword(model);
            
        }
        
        /// <summary>
        /// Test SetRestaurantSettings
        /// </summary>
        [Test]
        public void SetRestaurantSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //RestaurantSettings settings = null;
            //instance.SetRestaurantSettings(restaurantId, settings);
            
        }
        
        /// <summary>
        /// Test UpdateRestaurant
        /// </summary>
        [Test]
        public void UpdateRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //Restaurant value = null;
            //var response = instance.UpdateRestaurant(restaurantId, value);
            //Assert.IsInstanceOf<Restaurant> (response, "response is Restaurant");
        }
        
        /// <summary>
        /// Test UpdateRestaurantZone
        /// </summary>
        [Test]
        public void UpdateRestaurantZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? zoneId = null;
            //ZoneCreate contract = null;
            //instance.UpdateRestaurantZone(restaurantId, zoneId, contract);
            
        }
        
        /// <summary>
        /// Test UpdateUserProfile
        /// </summary>
        [Test]
        public void UpdateUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserProfile profile = null;
            //instance.UpdateUserProfile(profile);
            
        }
        
        /// <summary>
        /// Test UpdateWaiter
        /// </summary>
        [Test]
        public void UpdateWaiterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? waiterId = null;
            //WaiterUpdate contract = null;
            //instance.UpdateWaiter(restaurantId, waiterId, contract);
            
        }
        
        /// <summary>
        /// Test UpdateWaiterZone
        /// </summary>
        [Test]
        public void UpdateWaiterZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? restaurantId = null;
            //int? waiterId = null;
            //ZoneCreate contract = null;
            //instance.UpdateWaiterZone(restaurantId, waiterId, contract);
            
        }
        
    }

}
