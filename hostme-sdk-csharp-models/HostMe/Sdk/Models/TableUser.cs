/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// TableUser
    /// </summary>
    [DataContract]
    public partial class TableUser :  IEquatable<TableUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableUser" /> class.
        /// </summary>
        /// <param name="User">User.</param>
        /// <param name="RegistrationTime">RegistrationTime.</param>
        /// <param name="EstimatedReleaseTime">EstimatedReleaseTime.</param>
        /// <param name="State">State.</param>
        /// <param name="TableNumber">TableNumber.</param>
        /// <param name="RegistrationId">RegistrationId.</param>
        /// <param name="ReservationId">ReservationId.</param>
        /// <param name="WaitingId">WaitingId.</param>
        public TableUser(TableUserInfo User = null, DateTimeOffset? RegistrationTime = null, DateTimeOffset? EstimatedReleaseTime = null, string State = null, string TableNumber = null, int? RegistrationId = null, string ReservationId = null, int? WaitingId = null)
        {
            this.User = User;
            this.RegistrationTime = RegistrationTime;
            this.EstimatedReleaseTime = EstimatedReleaseTime;
            this.State = State;
            this.TableNumber = TableNumber;
            this.RegistrationId = RegistrationId;
            this.ReservationId = ReservationId;
            this.WaitingId = WaitingId;
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public TableUserInfo User { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationTime
        /// </summary>
        [DataMember(Name="registrationTime", EmitDefaultValue=true)]
        public DateTimeOffset? RegistrationTime { get; set; }
        /// <summary>
        /// Gets or Sets EstimatedReleaseTime
        /// </summary>
        [DataMember(Name="estimatedReleaseTime", EmitDefaultValue=true)]
        public DateTimeOffset? EstimatedReleaseTime { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets TableNumber
        /// </summary>
        [DataMember(Name="tableNumber", EmitDefaultValue=true)]
        public string TableNumber { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationId
        /// </summary>
        [DataMember(Name="registrationId", EmitDefaultValue=true)]
        public int? RegistrationId { get; set; }
        /// <summary>
        /// Gets or Sets ReservationId
        /// </summary>
        [DataMember(Name="reservationId", EmitDefaultValue=true)]
        public string ReservationId { get; set; }
        /// <summary>
        /// Gets or Sets WaitingId
        /// </summary>
        [DataMember(Name="waitingId", EmitDefaultValue=true)]
        public int? WaitingId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableUser {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  RegistrationTime: ").Append(RegistrationTime).Append("\n");
            sb.Append("  EstimatedReleaseTime: ").Append(EstimatedReleaseTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TableNumber: ").Append(TableNumber).Append("\n");
            sb.Append("  RegistrationId: ").Append(RegistrationId).Append("\n");
            sb.Append("  ReservationId: ").Append(ReservationId).Append("\n");
            sb.Append("  WaitingId: ").Append(WaitingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TableUser);
        }

        /// <summary>
        /// Returns true if TableUser instances are equal
        /// </summary>
        /// <param name="other">Instance of TableUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.RegistrationTime == other.RegistrationTime ||
                    this.RegistrationTime != null &&
                    this.RegistrationTime.Equals(other.RegistrationTime)
                ) && 
                (
                    this.EstimatedReleaseTime == other.EstimatedReleaseTime ||
                    this.EstimatedReleaseTime != null &&
                    this.EstimatedReleaseTime.Equals(other.EstimatedReleaseTime)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.TableNumber == other.TableNumber ||
                    this.TableNumber != null &&
                    this.TableNumber.Equals(other.TableNumber)
                ) && 
                (
                    this.RegistrationId == other.RegistrationId ||
                    this.RegistrationId != null &&
                    this.RegistrationId.Equals(other.RegistrationId)
                ) && 
                (
                    this.ReservationId == other.ReservationId ||
                    this.ReservationId != null &&
                    this.ReservationId.Equals(other.ReservationId)
                ) && 
                (
                    this.WaitingId == other.WaitingId ||
                    this.WaitingId != null &&
                    this.WaitingId.Equals(other.WaitingId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.RegistrationTime != null)
                    hash = hash * 59 + this.RegistrationTime.GetHashCode();
                if (this.EstimatedReleaseTime != null)
                    hash = hash * 59 + this.EstimatedReleaseTime.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.TableNumber != null)
                    hash = hash * 59 + this.TableNumber.GetHashCode();
                if (this.RegistrationId != null)
                    hash = hash * 59 + this.RegistrationId.GetHashCode();
                if (this.ReservationId != null)
                    hash = hash * 59 + this.ReservationId.GetHashCode();
                if (this.WaitingId != null)
                    hash = hash * 59 + this.WaitingId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}