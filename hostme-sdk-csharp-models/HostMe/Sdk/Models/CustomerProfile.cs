/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// CustomerProfile
    /// </summary>
    [DataContract]
    public partial class CustomerProfile :  IEquatable<CustomerProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerProfile" /> class.
        /// </summary>
        /// <param name="LastVisitDate">LastVisitDate.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="VisitsCount">VisitsCount.</param>
        /// <param name="CustomerName">CustomerName.</param>
        /// <param name="Status">Status.</param>
        /// <param name="MembershipLevel">MembershipLevel.</param>
        /// <param name="Points">Points.</param>
        /// <param name="_CustomerProfile">_CustomerProfile.</param>
        public CustomerProfile(DateTimeOffset? LastVisitDate = null, string Phone = null, int? VisitsCount = null, string CustomerName = null, string Status = null, string MembershipLevel = null, long? Points = null, ProfileData _CustomerProfile = null)
        {
            this.LastVisitDate = LastVisitDate;
            this.Phone = Phone;
            this.VisitsCount = VisitsCount;
            this.CustomerName = CustomerName;
            this.Status = Status;
            this.MembershipLevel = MembershipLevel;
            this.Points = Points;
            this._CustomerProfile = _CustomerProfile;
        }
        
        /// <summary>
        /// Gets or Sets LastVisitDate
        /// </summary>
        [DataMember(Name="lastVisitDate", EmitDefaultValue=true)]
        public DateTimeOffset? LastVisitDate { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets VisitsCount
        /// </summary>
        [DataMember(Name="visitsCount", EmitDefaultValue=true)]
        public int? VisitsCount { get; set; }
        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="customerName", EmitDefaultValue=true)]
        public string CustomerName { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets MembershipLevel
        /// </summary>
        [DataMember(Name="membershipLevel", EmitDefaultValue=true)]
        public string MembershipLevel { get; set; }
        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=true)]
        public long? Points { get; set; }
        /// <summary>
        /// Gets or Sets _CustomerProfile
        /// </summary>
        [DataMember(Name="customerProfile", EmitDefaultValue=true)]
        public ProfileData _CustomerProfile { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerProfile {\n");
            sb.Append("  LastVisitDate: ").Append(LastVisitDate).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  VisitsCount: ").Append(VisitsCount).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MembershipLevel: ").Append(MembershipLevel).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  _CustomerProfile: ").Append(_CustomerProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomerProfile);
        }

        /// <summary>
        /// Returns true if CustomerProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerProfile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LastVisitDate == other.LastVisitDate ||
                    this.LastVisitDate != null &&
                    this.LastVisitDate.Equals(other.LastVisitDate)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.VisitsCount == other.VisitsCount ||
                    this.VisitsCount != null &&
                    this.VisitsCount.Equals(other.VisitsCount)
                ) && 
                (
                    this.CustomerName == other.CustomerName ||
                    this.CustomerName != null &&
                    this.CustomerName.Equals(other.CustomerName)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.MembershipLevel == other.MembershipLevel ||
                    this.MembershipLevel != null &&
                    this.MembershipLevel.Equals(other.MembershipLevel)
                ) && 
                (
                    this.Points == other.Points ||
                    this.Points != null &&
                    this.Points.Equals(other.Points)
                ) && 
                (
                    this._CustomerProfile == other._CustomerProfile ||
                    this._CustomerProfile != null &&
                    this._CustomerProfile.Equals(other._CustomerProfile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LastVisitDate != null)
                    hash = hash * 59 + this.LastVisitDate.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.VisitsCount != null)
                    hash = hash * 59 + this.VisitsCount.GetHashCode();
                if (this.CustomerName != null)
                    hash = hash * 59 + this.CustomerName.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.MembershipLevel != null)
                    hash = hash * 59 + this.MembershipLevel.GetHashCode();
                if (this.Points != null)
                    hash = hash * 59 + this.Points.GetHashCode();
                if (this._CustomerProfile != null)
                    hash = hash * 59 + this._CustomerProfile.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}