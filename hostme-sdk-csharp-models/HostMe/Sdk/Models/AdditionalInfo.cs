/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// AdditionalInfo
    /// </summary>
    [DataContract]
    public partial class AdditionalInfo :  IEquatable<AdditionalInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalInfo" /> class.
        /// </summary>
        /// <param name="Allergy">Allergy.</param>
        /// <param name="Vegetarian">Vegetarian.</param>
        /// <param name="_Event">_Event.</param>
        /// <param name="BabyChair">BabyChair.</param>
        /// <param name="Stroller">Stroller.</param>
        /// <param name="Vip">Vip.</param>
        /// <param name="Booth">Booth.</param>
        /// <param name="HighTop">HighTop.</param>
        /// <param name="Table">Table.</param>
        /// <param name="HandicapAccessible">HandicapAccessible.</param>
        public AdditionalInfo(bool? Allergy = null, bool? Vegetarian = null, bool? _Event = null, bool? BabyChair = null, bool? Stroller = null, bool? Vip = null, bool? Booth = null, bool? HighTop = null, bool? Table = null, bool? HandicapAccessible = null)
        {
            this.Allergy = Allergy;
            this.Vegetarian = Vegetarian;
            this._Event = _Event;
            this.BabyChair = BabyChair;
            this.Stroller = Stroller;
            this.Vip = Vip;
            this.Booth = Booth;
            this.HighTop = HighTop;
            this.Table = Table;
            this.HandicapAccessible = HandicapAccessible;
        }
        
        /// <summary>
        /// Gets or Sets Allergy
        /// </summary>
        [DataMember(Name="allergy", EmitDefaultValue=true)]
        public bool? Allergy { get; set; }
        /// <summary>
        /// Gets or Sets Vegetarian
        /// </summary>
        [DataMember(Name="vegetarian", EmitDefaultValue=true)]
        public bool? Vegetarian { get; set; }
        /// <summary>
        /// Gets or Sets _Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=true)]
        public bool? _Event { get; set; }
        /// <summary>
        /// Gets or Sets BabyChair
        /// </summary>
        [DataMember(Name="babyChair", EmitDefaultValue=true)]
        public bool? BabyChair { get; set; }
        /// <summary>
        /// Gets or Sets Stroller
        /// </summary>
        [DataMember(Name="stroller", EmitDefaultValue=true)]
        public bool? Stroller { get; set; }
        /// <summary>
        /// Gets or Sets Vip
        /// </summary>
        [DataMember(Name="vip", EmitDefaultValue=true)]
        public bool? Vip { get; set; }
        /// <summary>
        /// Gets or Sets Booth
        /// </summary>
        [DataMember(Name="booth", EmitDefaultValue=true)]
        public bool? Booth { get; set; }
        /// <summary>
        /// Gets or Sets HighTop
        /// </summary>
        [DataMember(Name="highTop", EmitDefaultValue=true)]
        public bool? HighTop { get; set; }
        /// <summary>
        /// Gets or Sets Table
        /// </summary>
        [DataMember(Name="table", EmitDefaultValue=true)]
        public bool? Table { get; set; }
        /// <summary>
        /// Gets or Sets HandicapAccessible
        /// </summary>
        [DataMember(Name="handicapAccessible", EmitDefaultValue=true)]
        public bool? HandicapAccessible { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalInfo {\n");
            sb.Append("  Allergy: ").Append(Allergy).Append("\n");
            sb.Append("  Vegetarian: ").Append(Vegetarian).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  BabyChair: ").Append(BabyChair).Append("\n");
            sb.Append("  Stroller: ").Append(Stroller).Append("\n");
            sb.Append("  Vip: ").Append(Vip).Append("\n");
            sb.Append("  Booth: ").Append(Booth).Append("\n");
            sb.Append("  HighTop: ").Append(HighTop).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  HandicapAccessible: ").Append(HandicapAccessible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdditionalInfo);
        }

        /// <summary>
        /// Returns true if AdditionalInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Allergy == other.Allergy ||
                    this.Allergy != null &&
                    this.Allergy.Equals(other.Allergy)
                ) && 
                (
                    this.Vegetarian == other.Vegetarian ||
                    this.Vegetarian != null &&
                    this.Vegetarian.Equals(other.Vegetarian)
                ) && 
                (
                    this._Event == other._Event ||
                    this._Event != null &&
                    this._Event.Equals(other._Event)
                ) && 
                (
                    this.BabyChair == other.BabyChair ||
                    this.BabyChair != null &&
                    this.BabyChair.Equals(other.BabyChair)
                ) && 
                (
                    this.Stroller == other.Stroller ||
                    this.Stroller != null &&
                    this.Stroller.Equals(other.Stroller)
                ) && 
                (
                    this.Vip == other.Vip ||
                    this.Vip != null &&
                    this.Vip.Equals(other.Vip)
                ) && 
                (
                    this.Booth == other.Booth ||
                    this.Booth != null &&
                    this.Booth.Equals(other.Booth)
                ) && 
                (
                    this.HighTop == other.HighTop ||
                    this.HighTop != null &&
                    this.HighTop.Equals(other.HighTop)
                ) && 
                (
                    this.Table == other.Table ||
                    this.Table != null &&
                    this.Table.Equals(other.Table)
                ) && 
                (
                    this.HandicapAccessible == other.HandicapAccessible ||
                    this.HandicapAccessible != null &&
                    this.HandicapAccessible.Equals(other.HandicapAccessible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Allergy != null)
                    hash = hash * 59 + this.Allergy.GetHashCode();
                if (this.Vegetarian != null)
                    hash = hash * 59 + this.Vegetarian.GetHashCode();
                if (this._Event != null)
                    hash = hash * 59 + this._Event.GetHashCode();
                if (this.BabyChair != null)
                    hash = hash * 59 + this.BabyChair.GetHashCode();
                if (this.Stroller != null)
                    hash = hash * 59 + this.Stroller.GetHashCode();
                if (this.Vip != null)
                    hash = hash * 59 + this.Vip.GetHashCode();
                if (this.Booth != null)
                    hash = hash * 59 + this.Booth.GetHashCode();
                if (this.HighTop != null)
                    hash = hash * 59 + this.HighTop.GetHashCode();
                if (this.Table != null)
                    hash = hash * 59 + this.Table.GetHashCode();
                if (this.HandicapAccessible != null)
                    hash = hash * 59 + this.HandicapAccessible.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}