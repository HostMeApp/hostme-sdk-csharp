/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// ReservationSettings
    /// </summary>
    [DataContract]
    public partial class ReservationSettings :  IEquatable<ReservationSettings>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AvailabilityMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityMethodEnum
        {
            
            /// <summary>
            /// Enum Cover for "Cover"
            /// </summary>
            [EnumMember(Value = "Cover")]
            Cover,
            
            /// <summary>
            /// Enum Table for "Table"
            /// </summary>
            [EnumMember(Value = "Table")]
            Table,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default
        }

        /// <summary>
        /// Gets or Sets ServersRotationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServersRotationTypeEnum
        {
            
            /// <summary>
            /// Enum LastSeatedTime for "LastSeatedTime"
            /// </summary>
            [EnumMember(Value = "LastSeatedTime")]
            LastSeatedTime,
            
            /// <summary>
            /// Enum LowestNumberOfParties for "LowestNumberOfParties"
            /// </summary>
            [EnumMember(Value = "LowestNumberOfParties")]
            LowestNumberOfParties,
            
            /// <summary>
            /// Enum LowestNumberOfTables for "LowestNumberOfTables"
            /// </summary>
            [EnumMember(Value = "LowestNumberOfTables")]
            LowestNumberOfTables,
            
            /// <summary>
            /// Enum LowestNumberOfGuests for "LowestNumberOfGuests"
            /// </summary>
            [EnumMember(Value = "LowestNumberOfGuests")]
            LowestNumberOfGuests
        }

        /// <summary>
        /// Gets or Sets AvailabilityMethod
        /// </summary>
        [DataMember(Name="availabilityMethod", EmitDefaultValue=true)]
        public AvailabilityMethodEnum? AvailabilityMethod { get; set; }
        /// <summary>
        /// Gets or Sets ServersRotationType
        /// </summary>
        [DataMember(Name="serversRotationType", EmitDefaultValue=true)]
        public ServersRotationTypeEnum? ServersRotationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReservationSettings" /> class.
        /// </summary>
        /// <param name="AvailabilityMethod">AvailabilityMethod.</param>
        /// <param name="ServersRotationType">ServersRotationType.</param>
        /// <param name="ConfirmationMessageRequestTemplate">ConfirmationMessageRequestTemplate.</param>
        /// <param name="CoversAvailableForWait">CoversAvailableForWait.</param>
        /// <param name="CoversAvaliableForReservation">CoversAvaliableForReservation.</param>
        /// <param name="DefaultMaxCoversPerSlot">DefaultMaxCoversPerSlot.</param>
        /// <param name="EnableAutoScheduling">EnableAutoScheduling.</param>
        /// <param name="ApprovalRequired">ApprovalRequired.</param>
        /// <param name="SkipConfirmDialog">SkipConfirmDialog.</param>
        /// <param name="IsEnabled">IsEnabled.</param>
        /// <param name="GuestReservationNote">GuestReservationNote.</param>
        /// <param name="ChargeIfCancelledBefore">ChargeIfCancelledBefore.</param>
        /// <param name="AvailableOnlineAreas">AvailableOnlineAreas.</param>
        /// <param name="UseManagersEmailForToSendFrom">UseManagersEmailForToSendFrom.</param>
        /// <param name="GroupSizeValidation">GroupSizeValidation.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="MaxCoversPerSlotExceptions">MaxCoversPerSlotExceptions.</param>
        /// <param name="MaxMinutesLate">MaxMinutesLate.</param>
        /// <param name="MaxPartySize">MaxPartySize.</param>
        /// <param name="MinutesToBlockTable">MinutesToBlockTable.</param>
        /// <param name="MiniutesToConfirm">MiniutesToConfirm.</param>
        /// <param name="MinPartySize">MinPartySize.</param>
        /// <param name="OptionalTableAssignment">OptionalTableAssignment.</param>
        /// <param name="NotifyPhoneNumber">NotifyPhoneNumber.</param>
        /// <param name="StripeConnected">StripeConnected.</param>
        /// <param name="BookingMinimumNoticeMinutes">BookingMinimumNoticeMinutes.</param>
        /// <param name="MinutesToNotifyManager">MinutesToNotifyManager.</param>
        /// <param name="RequireReservationConfirmation">RequireReservationConfirmation.</param>
        /// <param name="AutoTableAssignment">AutoTableAssignment.</param>
        /// <param name="ReservationEmail">ReservationEmail.</param>
        /// <param name="ReservationHours">ReservationHours.</param>
        /// <param name="ReservationHoursStep">ReservationHoursStep.</param>
        /// <param name="StatusMessages">StatusMessages.</param>
        /// <param name="TableStates">TableStates.</param>
        /// <param name="AdditionalInfo">AdditionalInfo.</param>
        /// <param name="NoShowFeeEnabled">NoShowFeeEnabled.</param>
        /// <param name="DepositRules">DepositRules.</param>
        /// <param name="CreditCardChargeEnabled">CreditCardChargeEnabled.</param>
        /// <param name="TableTurnOver">TableTurnOver.</param>
        /// <param name="TableTurnOverByGroup">TableTurnOverByGroup.</param>
        /// <param name="TotalCovers">TotalCovers.</param>
        public ReservationSettings(AvailabilityMethodEnum? AvailabilityMethod = null, ServersRotationTypeEnum? ServersRotationType = null, string ConfirmationMessageRequestTemplate = null, int? CoversAvailableForWait = null, int? CoversAvaliableForReservation = null, int? DefaultMaxCoversPerSlot = null, bool? EnableAutoScheduling = null, bool? ApprovalRequired = null, bool? SkipConfirmDialog = null, bool? IsEnabled = null, string GuestReservationNote = null, int? ChargeIfCancelledBefore = null, bool? AvailableOnlineAreas = null, bool? UseManagersEmailForToSendFrom = null, bool? GroupSizeValidation = null, string Currency = null, List<SlotSetting> MaxCoversPerSlotExceptions = null, int? MaxMinutesLate = null, int? MaxPartySize = null, int? MinutesToBlockTable = null, int? MiniutesToConfirm = null, int? MinPartySize = null, bool? OptionalTableAssignment = null, string NotifyPhoneNumber = null, bool? StripeConnected = null, int? BookingMinimumNoticeMinutes = null, int? MinutesToNotifyManager = null, bool? RequireReservationConfirmation = null, bool? AutoTableAssignment = null, string ReservationEmail = null, List<WeekDayOpenHours> ReservationHours = null, int? ReservationHoursStep = null, List<StatusMessage> StatusMessages = null, List<TableState> TableStates = null, AdditionalInfo AdditionalInfo = null, bool? NoShowFeeEnabled = null, Dictionary<string, int?> DepositRules = null, bool? CreditCardChargeEnabled = null, double? TableTurnOver = null, List<List<double?>> TableTurnOverByGroup = null, int? TotalCovers = null)
        {
            this.AvailabilityMethod = AvailabilityMethod;
            this.ServersRotationType = ServersRotationType;
            this.ConfirmationMessageRequestTemplate = ConfirmationMessageRequestTemplate;
            this.CoversAvailableForWait = CoversAvailableForWait;
            this.CoversAvaliableForReservation = CoversAvaliableForReservation;
            this.DefaultMaxCoversPerSlot = DefaultMaxCoversPerSlot;
            this.EnableAutoScheduling = EnableAutoScheduling;
            this.ApprovalRequired = ApprovalRequired;
            this.SkipConfirmDialog = SkipConfirmDialog;
            this.IsEnabled = IsEnabled;
            this.GuestReservationNote = GuestReservationNote;
            this.ChargeIfCancelledBefore = ChargeIfCancelledBefore;
            this.AvailableOnlineAreas = AvailableOnlineAreas;
            this.UseManagersEmailForToSendFrom = UseManagersEmailForToSendFrom;
            this.GroupSizeValidation = GroupSizeValidation;
            this.Currency = Currency;
            this.MaxCoversPerSlotExceptions = MaxCoversPerSlotExceptions;
            this.MaxMinutesLate = MaxMinutesLate;
            this.MaxPartySize = MaxPartySize;
            this.MinutesToBlockTable = MinutesToBlockTable;
            this.MiniutesToConfirm = MiniutesToConfirm;
            this.MinPartySize = MinPartySize;
            this.OptionalTableAssignment = OptionalTableAssignment;
            this.NotifyPhoneNumber = NotifyPhoneNumber;
            this.StripeConnected = StripeConnected;
            this.BookingMinimumNoticeMinutes = BookingMinimumNoticeMinutes;
            this.MinutesToNotifyManager = MinutesToNotifyManager;
            this.RequireReservationConfirmation = RequireReservationConfirmation;
            this.AutoTableAssignment = AutoTableAssignment;
            this.ReservationEmail = ReservationEmail;
            this.ReservationHours = ReservationHours;
            this.ReservationHoursStep = ReservationHoursStep;
            this.StatusMessages = StatusMessages;
            this.TableStates = TableStates;
            this.AdditionalInfo = AdditionalInfo;
            this.NoShowFeeEnabled = NoShowFeeEnabled;
            this.DepositRules = DepositRules;
            this.CreditCardChargeEnabled = CreditCardChargeEnabled;
            this.TableTurnOver = TableTurnOver;
            this.TableTurnOverByGroup = TableTurnOverByGroup;
            this.TotalCovers = TotalCovers;
        }
        
        /// <summary>
        /// Gets or Sets ConfirmationMessageRequestTemplate
        /// </summary>
        [DataMember(Name="confirmationMessageRequestTemplate", EmitDefaultValue=true)]
        public string ConfirmationMessageRequestTemplate { get; set; }
        /// <summary>
        /// Gets or Sets CoversAvailableForWait
        /// </summary>
        [DataMember(Name="coversAvailableForWait", EmitDefaultValue=true)]
        public int? CoversAvailableForWait { get; set; }
        /// <summary>
        /// Gets or Sets CoversAvaliableForReservation
        /// </summary>
        [DataMember(Name="coversAvaliableForReservation", EmitDefaultValue=true)]
        public int? CoversAvaliableForReservation { get; set; }
        /// <summary>
        /// Gets or Sets DefaultMaxCoversPerSlot
        /// </summary>
        [DataMember(Name="defaultMaxCoversPerSlot", EmitDefaultValue=true)]
        public int? DefaultMaxCoversPerSlot { get; set; }
        /// <summary>
        /// Gets or Sets EnableAutoScheduling
        /// </summary>
        [DataMember(Name="enableAutoScheduling", EmitDefaultValue=true)]
        public bool? EnableAutoScheduling { get; set; }
        /// <summary>
        /// Gets or Sets ApprovalRequired
        /// </summary>
        [DataMember(Name="approvalRequired", EmitDefaultValue=true)]
        public bool? ApprovalRequired { get; set; }
        /// <summary>
        /// Gets or Sets SkipConfirmDialog
        /// </summary>
        [DataMember(Name="skipConfirmDialog", EmitDefaultValue=true)]
        public bool? SkipConfirmDialog { get; set; }
        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=true)]
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets or Sets GuestReservationNote
        /// </summary>
        [DataMember(Name="guestReservationNote", EmitDefaultValue=true)]
        public string GuestReservationNote { get; set; }
        /// <summary>
        /// Gets or Sets ChargeIfCancelledBefore
        /// </summary>
        [DataMember(Name="chargeIfCancelledBefore", EmitDefaultValue=true)]
        public int? ChargeIfCancelledBefore { get; set; }
        /// <summary>
        /// Gets or Sets AvailableOnlineAreas
        /// </summary>
        [DataMember(Name="availableOnlineAreas", EmitDefaultValue=true)]
        public bool? AvailableOnlineAreas { get; set; }
        /// <summary>
        /// Gets or Sets UseManagersEmailForToSendFrom
        /// </summary>
        [DataMember(Name="useManagersEmailForToSendFrom", EmitDefaultValue=true)]
        public bool? UseManagersEmailForToSendFrom { get; set; }
        /// <summary>
        /// Gets or Sets GroupSizeValidation
        /// </summary>
        [DataMember(Name="groupSizeValidation", EmitDefaultValue=true)]
        public bool? GroupSizeValidation { get; set; }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }
        /// <summary>
        /// Gets or Sets MaxCoversPerSlotExceptions
        /// </summary>
        [DataMember(Name="maxCoversPerSlotExceptions", EmitDefaultValue=true)]
        public List<SlotSetting> MaxCoversPerSlotExceptions { get; set; }
        /// <summary>
        /// Gets or Sets MaxMinutesLate
        /// </summary>
        [DataMember(Name="maxMinutesLate", EmitDefaultValue=true)]
        public int? MaxMinutesLate { get; set; }
        /// <summary>
        /// Gets or Sets MaxPartySize
        /// </summary>
        [DataMember(Name="maxPartySize", EmitDefaultValue=true)]
        public int? MaxPartySize { get; set; }
        /// <summary>
        /// Gets or Sets MinutesToBlockTable
        /// </summary>
        [DataMember(Name="minutesToBlockTable", EmitDefaultValue=true)]
        public int? MinutesToBlockTable { get; set; }
        /// <summary>
        /// Gets or Sets MiniutesToConfirm
        /// </summary>
        [DataMember(Name="miniutesToConfirm", EmitDefaultValue=true)]
        public int? MiniutesToConfirm { get; set; }
        /// <summary>
        /// Gets or Sets MinPartySize
        /// </summary>
        [DataMember(Name="minPartySize", EmitDefaultValue=true)]
        public int? MinPartySize { get; set; }
        /// <summary>
        /// Gets or Sets OptionalTableAssignment
        /// </summary>
        [DataMember(Name="optionalTableAssignment", EmitDefaultValue=true)]
        public bool? OptionalTableAssignment { get; set; }
        /// <summary>
        /// Gets or Sets NotifyPhoneNumber
        /// </summary>
        [DataMember(Name="notifyPhoneNumber", EmitDefaultValue=true)]
        public string NotifyPhoneNumber { get; set; }
        /// <summary>
        /// Gets or Sets StripeConnected
        /// </summary>
        [DataMember(Name="stripeConnected", EmitDefaultValue=true)]
        public bool? StripeConnected { get; set; }
        /// <summary>
        /// Gets or Sets BookingMinimumNoticeMinutes
        /// </summary>
        [DataMember(Name="bookingMinimumNoticeMinutes", EmitDefaultValue=true)]
        public int? BookingMinimumNoticeMinutes { get; set; }
        /// <summary>
        /// Gets or Sets MinutesToNotifyManager
        /// </summary>
        [DataMember(Name="minutesToNotifyManager", EmitDefaultValue=true)]
        public int? MinutesToNotifyManager { get; set; }
        /// <summary>
        /// Gets or Sets RequireReservationConfirmation
        /// </summary>
        [DataMember(Name="requireReservationConfirmation", EmitDefaultValue=true)]
        public bool? RequireReservationConfirmation { get; set; }
        /// <summary>
        /// Gets or Sets AutoTableAssignment
        /// </summary>
        [DataMember(Name="autoTableAssignment", EmitDefaultValue=true)]
        public bool? AutoTableAssignment { get; set; }
        /// <summary>
        /// Gets or Sets ReservationEmail
        /// </summary>
        [DataMember(Name="reservationEmail", EmitDefaultValue=true)]
        public string ReservationEmail { get; set; }
        /// <summary>
        /// Gets or Sets ReservationHours
        /// </summary>
        [DataMember(Name="reservationHours", EmitDefaultValue=true)]
        public List<WeekDayOpenHours> ReservationHours { get; set; }
        /// <summary>
        /// Gets or Sets ReservationHoursStep
        /// </summary>
        [DataMember(Name="reservationHoursStep", EmitDefaultValue=true)]
        public int? ReservationHoursStep { get; set; }
        /// <summary>
        /// Gets or Sets StatusMessages
        /// </summary>
        [DataMember(Name="statusMessages", EmitDefaultValue=true)]
        public List<StatusMessage> StatusMessages { get; set; }
        /// <summary>
        /// Gets or Sets TableStates
        /// </summary>
        [DataMember(Name="tableStates", EmitDefaultValue=true)]
        public List<TableState> TableStates { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name="additionalInfo", EmitDefaultValue=true)]
        public AdditionalInfo AdditionalInfo { get; set; }
        /// <summary>
        /// Gets or Sets NoShowFeeEnabled
        /// </summary>
        [DataMember(Name="noShowFeeEnabled", EmitDefaultValue=true)]
        public bool? NoShowFeeEnabled { get; set; }
        /// <summary>
        /// Gets or Sets DepositRules
        /// </summary>
        [DataMember(Name="depositRules", EmitDefaultValue=true)]
        public Dictionary<string, int?> DepositRules { get; set; }
        /// <summary>
        /// Gets or Sets CreditCardChargeEnabled
        /// </summary>
        [DataMember(Name="creditCardChargeEnabled", EmitDefaultValue=true)]
        public bool? CreditCardChargeEnabled { get; set; }
        /// <summary>
        /// Gets or Sets TableTurnOver
        /// </summary>
        [DataMember(Name="tableTurnOver", EmitDefaultValue=true)]
        public double? TableTurnOver { get; set; }
        /// <summary>
        /// Gets or Sets TableTurnOverByGroup
        /// </summary>
        [DataMember(Name="tableTurnOverByGroup", EmitDefaultValue=true)]
        public List<List<double?>> TableTurnOverByGroup { get; set; }
        /// <summary>
        /// Gets or Sets TotalCovers
        /// </summary>
        [DataMember(Name="totalCovers", EmitDefaultValue=true)]
        public int? TotalCovers { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReservationSettings {\n");
            sb.Append("  AvailabilityMethod: ").Append(AvailabilityMethod).Append("\n");
            sb.Append("  ServersRotationType: ").Append(ServersRotationType).Append("\n");
            sb.Append("  ConfirmationMessageRequestTemplate: ").Append(ConfirmationMessageRequestTemplate).Append("\n");
            sb.Append("  CoversAvailableForWait: ").Append(CoversAvailableForWait).Append("\n");
            sb.Append("  CoversAvaliableForReservation: ").Append(CoversAvaliableForReservation).Append("\n");
            sb.Append("  DefaultMaxCoversPerSlot: ").Append(DefaultMaxCoversPerSlot).Append("\n");
            sb.Append("  EnableAutoScheduling: ").Append(EnableAutoScheduling).Append("\n");
            sb.Append("  ApprovalRequired: ").Append(ApprovalRequired).Append("\n");
            sb.Append("  SkipConfirmDialog: ").Append(SkipConfirmDialog).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  GuestReservationNote: ").Append(GuestReservationNote).Append("\n");
            sb.Append("  ChargeIfCancelledBefore: ").Append(ChargeIfCancelledBefore).Append("\n");
            sb.Append("  AvailableOnlineAreas: ").Append(AvailableOnlineAreas).Append("\n");
            sb.Append("  UseManagersEmailForToSendFrom: ").Append(UseManagersEmailForToSendFrom).Append("\n");
            sb.Append("  GroupSizeValidation: ").Append(GroupSizeValidation).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  MaxCoversPerSlotExceptions: ").Append(MaxCoversPerSlotExceptions).Append("\n");
            sb.Append("  MaxMinutesLate: ").Append(MaxMinutesLate).Append("\n");
            sb.Append("  MaxPartySize: ").Append(MaxPartySize).Append("\n");
            sb.Append("  MinutesToBlockTable: ").Append(MinutesToBlockTable).Append("\n");
            sb.Append("  MiniutesToConfirm: ").Append(MiniutesToConfirm).Append("\n");
            sb.Append("  MinPartySize: ").Append(MinPartySize).Append("\n");
            sb.Append("  OptionalTableAssignment: ").Append(OptionalTableAssignment).Append("\n");
            sb.Append("  NotifyPhoneNumber: ").Append(NotifyPhoneNumber).Append("\n");
            sb.Append("  StripeConnected: ").Append(StripeConnected).Append("\n");
            sb.Append("  BookingMinimumNoticeMinutes: ").Append(BookingMinimumNoticeMinutes).Append("\n");
            sb.Append("  MinutesToNotifyManager: ").Append(MinutesToNotifyManager).Append("\n");
            sb.Append("  RequireReservationConfirmation: ").Append(RequireReservationConfirmation).Append("\n");
            sb.Append("  AutoTableAssignment: ").Append(AutoTableAssignment).Append("\n");
            sb.Append("  ReservationEmail: ").Append(ReservationEmail).Append("\n");
            sb.Append("  ReservationHours: ").Append(ReservationHours).Append("\n");
            sb.Append("  ReservationHoursStep: ").Append(ReservationHoursStep).Append("\n");
            sb.Append("  StatusMessages: ").Append(StatusMessages).Append("\n");
            sb.Append("  TableStates: ").Append(TableStates).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  NoShowFeeEnabled: ").Append(NoShowFeeEnabled).Append("\n");
            sb.Append("  DepositRules: ").Append(DepositRules).Append("\n");
            sb.Append("  CreditCardChargeEnabled: ").Append(CreditCardChargeEnabled).Append("\n");
            sb.Append("  TableTurnOver: ").Append(TableTurnOver).Append("\n");
            sb.Append("  TableTurnOverByGroup: ").Append(TableTurnOverByGroup).Append("\n");
            sb.Append("  TotalCovers: ").Append(TotalCovers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReservationSettings);
        }

        /// <summary>
        /// Returns true if ReservationSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of ReservationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReservationSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvailabilityMethod == other.AvailabilityMethod ||
                    this.AvailabilityMethod != null &&
                    this.AvailabilityMethod.Equals(other.AvailabilityMethod)
                ) && 
                (
                    this.ServersRotationType == other.ServersRotationType ||
                    this.ServersRotationType != null &&
                    this.ServersRotationType.Equals(other.ServersRotationType)
                ) && 
                (
                    this.ConfirmationMessageRequestTemplate == other.ConfirmationMessageRequestTemplate ||
                    this.ConfirmationMessageRequestTemplate != null &&
                    this.ConfirmationMessageRequestTemplate.Equals(other.ConfirmationMessageRequestTemplate)
                ) && 
                (
                    this.CoversAvailableForWait == other.CoversAvailableForWait ||
                    this.CoversAvailableForWait != null &&
                    this.CoversAvailableForWait.Equals(other.CoversAvailableForWait)
                ) && 
                (
                    this.CoversAvaliableForReservation == other.CoversAvaliableForReservation ||
                    this.CoversAvaliableForReservation != null &&
                    this.CoversAvaliableForReservation.Equals(other.CoversAvaliableForReservation)
                ) && 
                (
                    this.DefaultMaxCoversPerSlot == other.DefaultMaxCoversPerSlot ||
                    this.DefaultMaxCoversPerSlot != null &&
                    this.DefaultMaxCoversPerSlot.Equals(other.DefaultMaxCoversPerSlot)
                ) && 
                (
                    this.EnableAutoScheduling == other.EnableAutoScheduling ||
                    this.EnableAutoScheduling != null &&
                    this.EnableAutoScheduling.Equals(other.EnableAutoScheduling)
                ) && 
                (
                    this.ApprovalRequired == other.ApprovalRequired ||
                    this.ApprovalRequired != null &&
                    this.ApprovalRequired.Equals(other.ApprovalRequired)
                ) && 
                (
                    this.SkipConfirmDialog == other.SkipConfirmDialog ||
                    this.SkipConfirmDialog != null &&
                    this.SkipConfirmDialog.Equals(other.SkipConfirmDialog)
                ) && 
                (
                    this.IsEnabled == other.IsEnabled ||
                    this.IsEnabled != null &&
                    this.IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    this.GuestReservationNote == other.GuestReservationNote ||
                    this.GuestReservationNote != null &&
                    this.GuestReservationNote.Equals(other.GuestReservationNote)
                ) && 
                (
                    this.ChargeIfCancelledBefore == other.ChargeIfCancelledBefore ||
                    this.ChargeIfCancelledBefore != null &&
                    this.ChargeIfCancelledBefore.Equals(other.ChargeIfCancelledBefore)
                ) && 
                (
                    this.AvailableOnlineAreas == other.AvailableOnlineAreas ||
                    this.AvailableOnlineAreas != null &&
                    this.AvailableOnlineAreas.Equals(other.AvailableOnlineAreas)
                ) && 
                (
                    this.UseManagersEmailForToSendFrom == other.UseManagersEmailForToSendFrom ||
                    this.UseManagersEmailForToSendFrom != null &&
                    this.UseManagersEmailForToSendFrom.Equals(other.UseManagersEmailForToSendFrom)
                ) && 
                (
                    this.GroupSizeValidation == other.GroupSizeValidation ||
                    this.GroupSizeValidation != null &&
                    this.GroupSizeValidation.Equals(other.GroupSizeValidation)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.MaxCoversPerSlotExceptions == other.MaxCoversPerSlotExceptions ||
                    this.MaxCoversPerSlotExceptions != null &&
                    this.MaxCoversPerSlotExceptions.SequenceEqual(other.MaxCoversPerSlotExceptions)
                ) && 
                (
                    this.MaxMinutesLate == other.MaxMinutesLate ||
                    this.MaxMinutesLate != null &&
                    this.MaxMinutesLate.Equals(other.MaxMinutesLate)
                ) && 
                (
                    this.MaxPartySize == other.MaxPartySize ||
                    this.MaxPartySize != null &&
                    this.MaxPartySize.Equals(other.MaxPartySize)
                ) && 
                (
                    this.MinutesToBlockTable == other.MinutesToBlockTable ||
                    this.MinutesToBlockTable != null &&
                    this.MinutesToBlockTable.Equals(other.MinutesToBlockTable)
                ) && 
                (
                    this.MiniutesToConfirm == other.MiniutesToConfirm ||
                    this.MiniutesToConfirm != null &&
                    this.MiniutesToConfirm.Equals(other.MiniutesToConfirm)
                ) && 
                (
                    this.MinPartySize == other.MinPartySize ||
                    this.MinPartySize != null &&
                    this.MinPartySize.Equals(other.MinPartySize)
                ) && 
                (
                    this.OptionalTableAssignment == other.OptionalTableAssignment ||
                    this.OptionalTableAssignment != null &&
                    this.OptionalTableAssignment.Equals(other.OptionalTableAssignment)
                ) && 
                (
                    this.NotifyPhoneNumber == other.NotifyPhoneNumber ||
                    this.NotifyPhoneNumber != null &&
                    this.NotifyPhoneNumber.Equals(other.NotifyPhoneNumber)
                ) && 
                (
                    this.StripeConnected == other.StripeConnected ||
                    this.StripeConnected != null &&
                    this.StripeConnected.Equals(other.StripeConnected)
                ) && 
                (
                    this.BookingMinimumNoticeMinutes == other.BookingMinimumNoticeMinutes ||
                    this.BookingMinimumNoticeMinutes != null &&
                    this.BookingMinimumNoticeMinutes.Equals(other.BookingMinimumNoticeMinutes)
                ) && 
                (
                    this.MinutesToNotifyManager == other.MinutesToNotifyManager ||
                    this.MinutesToNotifyManager != null &&
                    this.MinutesToNotifyManager.Equals(other.MinutesToNotifyManager)
                ) && 
                (
                    this.RequireReservationConfirmation == other.RequireReservationConfirmation ||
                    this.RequireReservationConfirmation != null &&
                    this.RequireReservationConfirmation.Equals(other.RequireReservationConfirmation)
                ) && 
                (
                    this.AutoTableAssignment == other.AutoTableAssignment ||
                    this.AutoTableAssignment != null &&
                    this.AutoTableAssignment.Equals(other.AutoTableAssignment)
                ) && 
                (
                    this.ReservationEmail == other.ReservationEmail ||
                    this.ReservationEmail != null &&
                    this.ReservationEmail.Equals(other.ReservationEmail)
                ) && 
                (
                    this.ReservationHours == other.ReservationHours ||
                    this.ReservationHours != null &&
                    this.ReservationHours.SequenceEqual(other.ReservationHours)
                ) && 
                (
                    this.ReservationHoursStep == other.ReservationHoursStep ||
                    this.ReservationHoursStep != null &&
                    this.ReservationHoursStep.Equals(other.ReservationHoursStep)
                ) && 
                (
                    this.StatusMessages == other.StatusMessages ||
                    this.StatusMessages != null &&
                    this.StatusMessages.SequenceEqual(other.StatusMessages)
                ) && 
                (
                    this.TableStates == other.TableStates ||
                    this.TableStates != null &&
                    this.TableStates.SequenceEqual(other.TableStates)
                ) && 
                (
                    this.AdditionalInfo == other.AdditionalInfo ||
                    this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(other.AdditionalInfo)
                ) && 
                (
                    this.NoShowFeeEnabled == other.NoShowFeeEnabled ||
                    this.NoShowFeeEnabled != null &&
                    this.NoShowFeeEnabled.Equals(other.NoShowFeeEnabled)
                ) && 
                (
                    this.DepositRules == other.DepositRules ||
                    this.DepositRules != null &&
                    this.DepositRules.SequenceEqual(other.DepositRules)
                ) && 
                (
                    this.CreditCardChargeEnabled == other.CreditCardChargeEnabled ||
                    this.CreditCardChargeEnabled != null &&
                    this.CreditCardChargeEnabled.Equals(other.CreditCardChargeEnabled)
                ) && 
                (
                    this.TableTurnOver == other.TableTurnOver ||
                    this.TableTurnOver != null &&
                    this.TableTurnOver.Equals(other.TableTurnOver)
                ) && 
                (
                    this.TableTurnOverByGroup == other.TableTurnOverByGroup ||
                    this.TableTurnOverByGroup != null &&
                    this.TableTurnOverByGroup.SequenceEqual(other.TableTurnOverByGroup)
                ) && 
                (
                    this.TotalCovers == other.TotalCovers ||
                    this.TotalCovers != null &&
                    this.TotalCovers.Equals(other.TotalCovers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvailabilityMethod != null)
                    hash = hash * 59 + this.AvailabilityMethod.GetHashCode();
                if (this.ServersRotationType != null)
                    hash = hash * 59 + this.ServersRotationType.GetHashCode();
                if (this.ConfirmationMessageRequestTemplate != null)
                    hash = hash * 59 + this.ConfirmationMessageRequestTemplate.GetHashCode();
                if (this.CoversAvailableForWait != null)
                    hash = hash * 59 + this.CoversAvailableForWait.GetHashCode();
                if (this.CoversAvaliableForReservation != null)
                    hash = hash * 59 + this.CoversAvaliableForReservation.GetHashCode();
                if (this.DefaultMaxCoversPerSlot != null)
                    hash = hash * 59 + this.DefaultMaxCoversPerSlot.GetHashCode();
                if (this.EnableAutoScheduling != null)
                    hash = hash * 59 + this.EnableAutoScheduling.GetHashCode();
                if (this.ApprovalRequired != null)
                    hash = hash * 59 + this.ApprovalRequired.GetHashCode();
                if (this.SkipConfirmDialog != null)
                    hash = hash * 59 + this.SkipConfirmDialog.GetHashCode();
                if (this.IsEnabled != null)
                    hash = hash * 59 + this.IsEnabled.GetHashCode();
                if (this.GuestReservationNote != null)
                    hash = hash * 59 + this.GuestReservationNote.GetHashCode();
                if (this.ChargeIfCancelledBefore != null)
                    hash = hash * 59 + this.ChargeIfCancelledBefore.GetHashCode();
                if (this.AvailableOnlineAreas != null)
                    hash = hash * 59 + this.AvailableOnlineAreas.GetHashCode();
                if (this.UseManagersEmailForToSendFrom != null)
                    hash = hash * 59 + this.UseManagersEmailForToSendFrom.GetHashCode();
                if (this.GroupSizeValidation != null)
                    hash = hash * 59 + this.GroupSizeValidation.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.MaxCoversPerSlotExceptions != null)
                    hash = hash * 59 + this.MaxCoversPerSlotExceptions.GetHashCode();
                if (this.MaxMinutesLate != null)
                    hash = hash * 59 + this.MaxMinutesLate.GetHashCode();
                if (this.MaxPartySize != null)
                    hash = hash * 59 + this.MaxPartySize.GetHashCode();
                if (this.MinutesToBlockTable != null)
                    hash = hash * 59 + this.MinutesToBlockTable.GetHashCode();
                if (this.MiniutesToConfirm != null)
                    hash = hash * 59 + this.MiniutesToConfirm.GetHashCode();
                if (this.MinPartySize != null)
                    hash = hash * 59 + this.MinPartySize.GetHashCode();
                if (this.OptionalTableAssignment != null)
                    hash = hash * 59 + this.OptionalTableAssignment.GetHashCode();
                if (this.NotifyPhoneNumber != null)
                    hash = hash * 59 + this.NotifyPhoneNumber.GetHashCode();
                if (this.StripeConnected != null)
                    hash = hash * 59 + this.StripeConnected.GetHashCode();
                if (this.BookingMinimumNoticeMinutes != null)
                    hash = hash * 59 + this.BookingMinimumNoticeMinutes.GetHashCode();
                if (this.MinutesToNotifyManager != null)
                    hash = hash * 59 + this.MinutesToNotifyManager.GetHashCode();
                if (this.RequireReservationConfirmation != null)
                    hash = hash * 59 + this.RequireReservationConfirmation.GetHashCode();
                if (this.AutoTableAssignment != null)
                    hash = hash * 59 + this.AutoTableAssignment.GetHashCode();
                if (this.ReservationEmail != null)
                    hash = hash * 59 + this.ReservationEmail.GetHashCode();
                if (this.ReservationHours != null)
                    hash = hash * 59 + this.ReservationHours.GetHashCode();
                if (this.ReservationHoursStep != null)
                    hash = hash * 59 + this.ReservationHoursStep.GetHashCode();
                if (this.StatusMessages != null)
                    hash = hash * 59 + this.StatusMessages.GetHashCode();
                if (this.TableStates != null)
                    hash = hash * 59 + this.TableStates.GetHashCode();
                if (this.AdditionalInfo != null)
                    hash = hash * 59 + this.AdditionalInfo.GetHashCode();
                if (this.NoShowFeeEnabled != null)
                    hash = hash * 59 + this.NoShowFeeEnabled.GetHashCode();
                if (this.DepositRules != null)
                    hash = hash * 59 + this.DepositRules.GetHashCode();
                if (this.CreditCardChargeEnabled != null)
                    hash = hash * 59 + this.CreditCardChargeEnabled.GetHashCode();
                if (this.TableTurnOver != null)
                    hash = hash * 59 + this.TableTurnOver.GetHashCode();
                if (this.TableTurnOverByGroup != null)
                    hash = hash * 59 + this.TableTurnOverByGroup.GetHashCode();
                if (this.TotalCovers != null)
                    hash = hash * 59 + this.TotalCovers.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}