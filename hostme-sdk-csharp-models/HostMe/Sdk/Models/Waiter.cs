/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// Waiter
    /// </summary>
    [DataContract]
    public partial class Waiter :  IEquatable<Waiter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Waiter" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Color">Color.</param>
        /// <param name="Tables">Tables.</param>
        /// <param name="TotalTables">TotalTables.</param>
        /// <param name="BusyTables">BusyTables.</param>
        /// <param name="WorkLoad">WorkLoad.</param>
        /// <param name="Image">Image.</param>
        public Waiter(int? Id = null, string FullName = null, string Email = null, string Color = null, List<string> Tables = null, int? TotalTables = null, int? BusyTables = null, int? WorkLoad = null, string Image = null)
        {
            this.Id = Id;
            this.FullName = FullName;
            this.Email = Email;
            this.Color = Color;
            this.Tables = Tables;
            this.TotalTables = TotalTables;
            this.BusyTables = BusyTables;
            this.WorkLoad = WorkLoad;
            this.Image = Image;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=true)]
        public string FullName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets Tables
        /// </summary>
        [DataMember(Name="tables", EmitDefaultValue=true)]
        public List<string> Tables { get; set; }
        /// <summary>
        /// Gets or Sets TotalTables
        /// </summary>
        [DataMember(Name="totalTables", EmitDefaultValue=true)]
        public int? TotalTables { get; set; }
        /// <summary>
        /// Gets or Sets BusyTables
        /// </summary>
        [DataMember(Name="busyTables", EmitDefaultValue=true)]
        public int? BusyTables { get; set; }
        /// <summary>
        /// Gets or Sets WorkLoad
        /// </summary>
        [DataMember(Name="workLoad", EmitDefaultValue=true)]
        public int? WorkLoad { get; set; }
        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=true)]
        public string Image { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Waiter {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Tables: ").Append(Tables).Append("\n");
            sb.Append("  TotalTables: ").Append(TotalTables).Append("\n");
            sb.Append("  BusyTables: ").Append(BusyTables).Append("\n");
            sb.Append("  WorkLoad: ").Append(WorkLoad).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Waiter);
        }

        /// <summary>
        /// Returns true if Waiter instances are equal
        /// </summary>
        /// <param name="other">Instance of Waiter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Waiter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.Tables == other.Tables ||
                    this.Tables != null &&
                    this.Tables.SequenceEqual(other.Tables)
                ) && 
                (
                    this.TotalTables == other.TotalTables ||
                    this.TotalTables != null &&
                    this.TotalTables.Equals(other.TotalTables)
                ) && 
                (
                    this.BusyTables == other.BusyTables ||
                    this.BusyTables != null &&
                    this.BusyTables.Equals(other.BusyTables)
                ) && 
                (
                    this.WorkLoad == other.WorkLoad ||
                    this.WorkLoad != null &&
                    this.WorkLoad.Equals(other.WorkLoad)
                ) && 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.Tables != null)
                    hash = hash * 59 + this.Tables.GetHashCode();
                if (this.TotalTables != null)
                    hash = hash * 59 + this.TotalTables.GetHashCode();
                if (this.BusyTables != null)
                    hash = hash * 59 + this.BusyTables.GetHashCode();
                if (this.WorkLoad != null)
                    hash = hash * 59 + this.WorkLoad.GetHashCode();
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}