/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// SingleValueNode
    /// </summary>
    [DataContract]
    public partial class SingleValueNode :  IEquatable<SingleValueNode>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Constant for "Constant"
            /// </summary>
            [EnumMember(Value = "Constant")]
            Constant,
            
            /// <summary>
            /// Enum Convert for "Convert"
            /// </summary>
            [EnumMember(Value = "Convert")]
            Convert,
            
            /// <summary>
            /// Enum NonentityRangeVariableReference for "NonentityRangeVariableReference"
            /// </summary>
            [EnumMember(Value = "NonentityRangeVariableReference")]
            NonentityRangeVariableReference,
            
            /// <summary>
            /// Enum BinaryOperator for "BinaryOperator"
            /// </summary>
            [EnumMember(Value = "BinaryOperator")]
            BinaryOperator,
            
            /// <summary>
            /// Enum UnaryOperator for "UnaryOperator"
            /// </summary>
            [EnumMember(Value = "UnaryOperator")]
            UnaryOperator,
            
            /// <summary>
            /// Enum SingleValuePropertyAccess for "SingleValuePropertyAccess"
            /// </summary>
            [EnumMember(Value = "SingleValuePropertyAccess")]
            SingleValuePropertyAccess,
            
            /// <summary>
            /// Enum CollectionPropertyAccess for "CollectionPropertyAccess"
            /// </summary>
            [EnumMember(Value = "CollectionPropertyAccess")]
            CollectionPropertyAccess,
            
            /// <summary>
            /// Enum SingleValueFunctionCall for "SingleValueFunctionCall"
            /// </summary>
            [EnumMember(Value = "SingleValueFunctionCall")]
            SingleValueFunctionCall,
            
            /// <summary>
            /// Enum Any for "Any"
            /// </summary>
            [EnumMember(Value = "Any")]
            Any,
            
            /// <summary>
            /// Enum CollectionNavigationNode for "CollectionNavigationNode"
            /// </summary>
            [EnumMember(Value = "CollectionNavigationNode")]
            CollectionNavigationNode,
            
            /// <summary>
            /// Enum SingleNavigationNode for "SingleNavigationNode"
            /// </summary>
            [EnumMember(Value = "SingleNavigationNode")]
            SingleNavigationNode,
            
            /// <summary>
            /// Enum SingleValueOpenPropertyAccess for "SingleValueOpenPropertyAccess"
            /// </summary>
            [EnumMember(Value = "SingleValueOpenPropertyAccess")]
            SingleValueOpenPropertyAccess,
            
            /// <summary>
            /// Enum SingleEntityCast for "SingleEntityCast"
            /// </summary>
            [EnumMember(Value = "SingleEntityCast")]
            SingleEntityCast,
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All,
            
            /// <summary>
            /// Enum EntityCollectionCast for "EntityCollectionCast"
            /// </summary>
            [EnumMember(Value = "EntityCollectionCast")]
            EntityCollectionCast,
            
            /// <summary>
            /// Enum EntityRangeVariableReference for "EntityRangeVariableReference"
            /// </summary>
            [EnumMember(Value = "EntityRangeVariableReference")]
            EntityRangeVariableReference,
            
            /// <summary>
            /// Enum SingleEntityFunctionCall for "SingleEntityFunctionCall"
            /// </summary>
            [EnumMember(Value = "SingleEntityFunctionCall")]
            SingleEntityFunctionCall,
            
            /// <summary>
            /// Enum CollectionFunctionCall for "CollectionFunctionCall"
            /// </summary>
            [EnumMember(Value = "CollectionFunctionCall")]
            CollectionFunctionCall,
            
            /// <summary>
            /// Enum EntityCollectionFunctionCall for "EntityCollectionFunctionCall"
            /// </summary>
            [EnumMember(Value = "EntityCollectionFunctionCall")]
            EntityCollectionFunctionCall,
            
            /// <summary>
            /// Enum NamedFunctionParameter for "NamedFunctionParameter"
            /// </summary>
            [EnumMember(Value = "NamedFunctionParameter")]
            NamedFunctionParameter
        }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=true)]
        public KindEnum? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleValueNode" /> class.
        /// </summary>
        /// <param name="TypeReference">TypeReference.</param>
        /// <param name="Kind">Kind.</param>
        public SingleValueNode(IEdmTypeReference TypeReference = null, KindEnum? Kind = null)
        {
            this.TypeReference = TypeReference;
            this.Kind = Kind;
        }
        
        /// <summary>
        /// Gets or Sets TypeReference
        /// </summary>
        [DataMember(Name="typeReference", EmitDefaultValue=true)]
        public IEdmTypeReference TypeReference { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleValueNode {\n");
            sb.Append("  TypeReference: ").Append(TypeReference).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SingleValueNode);
        }

        /// <summary>
        /// Returns true if SingleValueNode instances are equal
        /// </summary>
        /// <param name="other">Instance of SingleValueNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleValueNode other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TypeReference == other.TypeReference ||
                    this.TypeReference != null &&
                    this.TypeReference.Equals(other.TypeReference)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TypeReference != null)
                    hash = hash * 59 + this.TypeReference.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}