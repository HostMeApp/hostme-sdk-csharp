/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// PartiesDimensional
    /// </summary>
    [DataContract]
    public partial class PartiesDimensional :  IEquatable<PartiesDimensional>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartiesDimensional" /> class.
        /// </summary>
        /// <param name="WeekDay">WeekDay.</param>
        /// <param name="Month">Month.</param>
        /// <param name="Week">Week.</param>
        /// <param name="Year">Year.</param>
        /// <param name="Day">Day.</param>
        public PartiesDimensional(string WeekDay = null, string Month = null, string Week = null, int? Year = null, string Day = null)
        {
            this.WeekDay = WeekDay;
            this.Month = Month;
            this.Week = Week;
            this.Year = Year;
            this.Day = Day;
        }
        
        /// <summary>
        /// Gets or Sets WeekDay
        /// </summary>
        [DataMember(Name="weekDay", EmitDefaultValue=true)]
        public string WeekDay { get; set; }
        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=true)]
        public string Month { get; set; }
        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name="week", EmitDefaultValue=true)]
        public string Week { get; set; }
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=true)]
        public int? Year { get; set; }
        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=true)]
        public string Day { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartiesDimensional {\n");
            sb.Append("  WeekDay: ").Append(WeekDay).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PartiesDimensional);
        }

        /// <summary>
        /// Returns true if PartiesDimensional instances are equal
        /// </summary>
        /// <param name="other">Instance of PartiesDimensional to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartiesDimensional other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WeekDay == other.WeekDay ||
                    this.WeekDay != null &&
                    this.WeekDay.Equals(other.WeekDay)
                ) && 
                (
                    this.Month == other.Month ||
                    this.Month != null &&
                    this.Month.Equals(other.Month)
                ) && 
                (
                    this.Week == other.Week ||
                    this.Week != null &&
                    this.Week.Equals(other.Week)
                ) && 
                (
                    this.Year == other.Year ||
                    this.Year != null &&
                    this.Year.Equals(other.Year)
                ) && 
                (
                    this.Day == other.Day ||
                    this.Day != null &&
                    this.Day.Equals(other.Day)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WeekDay != null)
                    hash = hash * 59 + this.WeekDay.GetHashCode();
                if (this.Month != null)
                    hash = hash * 59 + this.Month.GetHashCode();
                if (this.Week != null)
                    hash = hash * 59 + this.Week.GetHashCode();
                if (this.Year != null)
                    hash = hash * 59 + this.Year.GetHashCode();
                if (this.Day != null)
                    hash = hash * 59 + this.Day.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}