/* 
 * Qa full api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: all
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace HostMe.Sdk.Model
{
    /// <summary>
    /// ZoneCreate
    /// </summary>
    [DataContract]
    public partial class ZoneCreate :  IEquatable<ZoneCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoneCreate" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="TableNumbers">TableNumbers.</param>
        /// <param name="Days">Days.</param>
        public ZoneCreate(string Name = null, List<string> TableNumbers = null, List<int?> Days = null)
        {
            this.Name = Name;
            this.TableNumbers = TableNumbers;
            this.Days = Days;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets TableNumbers
        /// </summary>
        [DataMember(Name="tableNumbers", EmitDefaultValue=true)]
        public List<string> TableNumbers { get; set; }
        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=true)]
        public List<int?> Days { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZoneCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TableNumbers: ").Append(TableNumbers).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ZoneCreate);
        }

        /// <summary>
        /// Returns true if ZoneCreate instances are equal
        /// </summary>
        /// <param name="other">Instance of ZoneCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneCreate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.TableNumbers == other.TableNumbers ||
                    this.TableNumbers != null &&
                    this.TableNumbers.SequenceEqual(other.TableNumbers)
                ) && 
                (
                    this.Days == other.Days ||
                    this.Days != null &&
                    this.Days.SequenceEqual(other.Days)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.TableNumbers != null)
                    hash = hash * 59 + this.TableNumbers.GetHashCode();
                if (this.Days != null)
                    hash = hash * 59 + this.Days.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}