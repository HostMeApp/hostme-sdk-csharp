using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using HostMe.Sdk.Client;
using HostMe.Sdk.Api;
using HostMe.Sdk.Model;


namespace HostMe.Sdk.Test
{
    /// <summary>
    ///  Class for testing AdminReservationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminReservationsApiTests
    {
        private AdminReservationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
           instance = new AdminReservationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminReservationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<AdminReservationsApi> (instance, "instance is a AdminReservationsApi");
        }

        
        /// <summary>
        /// Test AddNewReservation
        /// </summary>
        [Test]
        public void AddNewReservationTest()
        {
            // TODO: add unit test for the method 'AddNewReservation'
            int? restaurantId = null; // TODO: replace null with proper value
            CreateReservation value = null; // TODO: replace null with proper value
            
            var response = instance.AddNewReservation(restaurantId, value);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test CancelReservation
        /// </summary>
        [Test]
        public void CancelReservationTest()
        {
            // TODO: add unit test for the method 'CancelReservation'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            CancelReservation cancelReservationContract = null; // TODO: replace null with proper value
            
            var response = instance.CancelReservation(restaurantId, reservationId, cancelReservationContract);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test CloseAsNoShow
        /// </summary>
        [Test]
        public void CloseAsNoShowTest()
        {
            // TODO: add unit test for the method 'CloseAsNoShow'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            var response = instance.CloseAsNoShow(restaurantId, reservationId);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test CloseAsSeated
        /// </summary>
        [Test]
        public void CloseAsSeatedTest()
        {
            // TODO: add unit test for the method 'CloseAsSeated'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            string tableNumber = null; // TODO: replace null with proper value
            
            var response = instance.CloseAsSeated(restaurantId, reservationId, tableNumber);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test GetMessages
        /// </summary>
        [Test]
        public void GetMessagesTest()
        {
            // TODO: add unit test for the method 'GetMessages'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            var response = instance.GetMessages(restaurantId, reservationId);
            Assert.IsInstanceOf<List<Message>> (response, "response is List<Message>"); 
        }
        
        /// <summary>
        /// Test GetReservationAvailability
        /// </summary>
        [Test]
        public void GetReservationAvailabilityTest()
        {
            // TODO: add unit test for the method 'GetReservationAvailability'
            int? restaurantId = null; // TODO: replace null with proper value
            DateTimeOffset? date = null; // TODO: replace null with proper value
            int? partySize = null; // TODO: replace null with proper value
            int? rangeInMinutes = null; // TODO: replace null with proper value
            double? tableTurnOver = null; // TODO: replace null with proper value
            string type = null; // TODO: replace null with proper value
            string areas = null; // TODO: replace null with proper value
            
            var response = instance.GetReservationAvailability(restaurantId, date, partySize, rangeInMinutes, tableTurnOver, type, areas);
            Assert.IsInstanceOf<AvailabilityResponse> (response, "response is AvailabilityResponse"); 
        }
        
        /// <summary>
        /// Test GetReservationById
        /// </summary>
        [Test]
        public void GetReservationByIdTest()
        {
            // TODO: add unit test for the method 'GetReservationById'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            var response = instance.GetReservationById(restaurantId, reservationId);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test GetReservationSettings
        /// </summary>
        [Test]
        public void GetReservationSettingsTest()
        {
            // TODO: add unit test for the method 'GetReservationSettings'
            int? restaurantId = null; // TODO: replace null with proper value
            
            var response = instance.GetReservationSettings(restaurantId);
            Assert.IsInstanceOf<ReservationSettings> (response, "response is ReservationSettings"); 
        }
        
        /// <summary>
        /// Test GetReservationsForPeriod
        /// </summary>
        [Test]
        public void GetReservationsForPeriodTest()
        {
            // TODO: add unit test for the method 'GetReservationsForPeriod'
            int? restaurantId = null; // TODO: replace null with proper value
            DateTimeOffset? from = null; // TODO: replace null with proper value
            DateTimeOffset? to = null; // TODO: replace null with proper value
            
            var response = instance.GetReservationsForPeriod(restaurantId, from, to);
            Assert.IsInstanceOf<List<Reservation>> (response, "response is List<Reservation>"); 
        }
        
        /// <summary>
        /// Test GetRestaurantReservationsStatistic
        /// </summary>
        [Test]
        public void GetRestaurantReservationsStatisticTest()
        {
            // TODO: add unit test for the method 'GetRestaurantReservationsStatistic'
            int? restaurantId = null; // TODO: replace null with proper value
            DateTimeOffset? date = null; // TODO: replace null with proper value
            
            var response = instance.GetRestaurantReservationsStatistic(restaurantId, date);
            Assert.IsInstanceOf<ReservationsStatistic> (response, "response is ReservationsStatistic"); 
        }
        
        /// <summary>
        /// Test GetUnreadMessagesCount
        /// </summary>
        [Test]
        public void GetUnreadMessagesCountTest()
        {
            // TODO: add unit test for the method 'GetUnreadMessagesCount'
            int? restaurantId = null; // TODO: replace null with proper value
            DateTimeOffset? from = null; // TODO: replace null with proper value
            
            var response = instance.GetUnreadMessagesCount(restaurantId, from);
            Assert.IsInstanceOf<Count> (response, "response is Count"); 
        }
        
        /// <summary>
        /// Test PlaceOnWaitList
        /// </summary>
        [Test]
        public void PlaceOnWaitListTest()
        {
            // TODO: add unit test for the method 'PlaceOnWaitList'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            var response = instance.PlaceOnWaitList(restaurantId, reservationId);
            Assert.IsInstanceOf<WaitingItem> (response, "response is WaitingItem"); 
        }
        
        /// <summary>
        /// Test ReOpenReservation
        /// </summary>
        [Test]
        public void ReOpenReservationTest()
        {
            // TODO: add unit test for the method 'ReOpenReservation'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            var response = instance.ReOpenReservation(restaurantId, reservationId);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test ReadAllMessage
        /// </summary>
        [Test]
        public void ReadAllMessageTest()
        {
            // TODO: add unit test for the method 'ReadAllMessage'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            
            instance.ReadAllMessage(restaurantId, reservationId);
             
        }
        
        /// <summary>
        /// Test SendGrid
        /// </summary>
        [Test]
        public void SendGridTest()
        {
            // TODO: add unit test for the method 'SendGrid'
            string from = null; // TODO: replace null with proper value
            string html = null; // TODO: replace null with proper value
            string text = null; // TODO: replace null with proper value
            string to = null; // TODO: replace null with proper value
            string subject = null; // TODO: replace null with proper value
            
            var response = instance.SendGrid(from, html, text, to, subject);
            Assert.IsInstanceOf<Reservation> (response, "response is Reservation"); 
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO: add unit test for the method 'SendMessage'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            CreateMessage createMessageContract = null; // TODO: replace null with proper value
            
            var response = instance.SendMessage(restaurantId, reservationId, createMessageContract);
            Assert.IsInstanceOf<Message> (response, "response is Message"); 
        }
        
        /// <summary>
        /// Test SetReservationSettings
        /// </summary>
        [Test]
        public void SetReservationSettingsTest()
        {
            // TODO: add unit test for the method 'SetReservationSettings'
            int? restaurantId = null; // TODO: replace null with proper value
            ReservationSettings settings = null; // TODO: replace null with proper value
            
            instance.SetReservationSettings(restaurantId, settings);
             
        }
        
        /// <summary>
        /// Test SubmitYelpReservation
        /// </summary>
        [Test]
        public void SubmitYelpReservationTest()
        {
            // TODO: add unit test for the method 'SubmitYelpReservation'
            
            instance.SubmitYelpReservation();
             
        }
        
        /// <summary>
        /// Test UpdateReservation
        /// </summary>
        [Test]
        public void UpdateReservationTest()
        {
            // TODO: add unit test for the method 'UpdateReservation'
            int? restaurantId = null; // TODO: replace null with proper value
            string reservationId = null; // TODO: replace null with proper value
            CreateReservation value = null; // TODO: replace null with proper value
            
            instance.UpdateReservation(restaurantId, reservationId, value);
             
        }
        
    }

}
